{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"RDKShell/","title":"RDKShell","text":""},{"location":"RDKShell/#rdkshell-plugin","title":"RDKShell Plugin","text":"<p>Version: 1.0.0</p> <p>A org.rdk.RDKShell plugin for Thunder framework.</p>"},{"location":"RDKShell/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Abbreviation, Acronyms and Terms</li> <li>Description</li> <li>Configuration</li> <li>Methods</li> <li>Notifications</li> </ul>"},{"location":"RDKShell/#abbreviation-acronyms-and-terms","title":"Abbreviation, Acronyms and Terms","text":"<p>[Refer to this link]</p> <p></p>"},{"location":"RDKShell/#description","title":"Description","text":"<p>RDKShell is a lightweight and efficient framework designed for managing graphical user interfaces and applications within RDK-based platforms. It provides tools for window management, rendering, and application lifecycle control, enabling seamless integration and performance optimization for set-top boxes and connected devices.</p> <p>The plugin is designed to be loaded and executed within the Thunder framework. For more information about the framework refer to [Thunder].</p> <p></p>"},{"location":"RDKShell/#configuration","title":"Configuration","text":"<p>The table below lists configuration options of the plugin.</p> Name Type Description callsign string Plugin instance name (default: org.rdk.RDKShell) classname string Class name: org.rdk.RDKShell locator string Library name: libWPEFrameworkRDKShell.so autostart boolean Determines if the plugin shall be started automatically along with the framework <p></p>"},{"location":"RDKShell/#methods","title":"Methods","text":"<p>The following methods are provided by the org.rdk.RDKShell plugin:</p> <p>RDKShell interface methods:</p> Method Description addAnimation Performs the set of animations addKeyIntercept Adds a key intercept to the client application specified addKeyIntercepts Adds the list of key intercepts addKeyListener Adds a key listener to an application addKeyMetadataListener Adds the key metadata listeners createDisplay Creates a display for the specified client using the configuration parameters destroy Destroys an application enableInactivityReporting Enables or disables inactivity reporting and events enableKeyRepeats Enables or disables key repeats enableLogsFlushing Enables or disables flushing all logs enableVirtualDisplay Enables or disables a virtual display for the specified client generateKey Triggers the key events (key press and release) getAvailableTypes Returns the list of application types available on the firmware getBounds Gets the bounds of the specified client getClients Gets a list of clients getCursorSize Returns the currently set cursor size getHolePunch Returns whether video hole punching is enabled or disabled for the specified client getKeyRepeatsEnabled Returns whether key repeating is enabled or disabled getLastWakeupKey Returns the last key press prior to a device wakeup getLogLevel Returns the currently set logging level getLogsFlushingEnabled Returns whether log flushing is enabled or disabled getOpacity Gets the opacity of the specified client getScale Returns the scale of an application getScreenResolution Gets the screen resolution getScreenshot Captures a screenshot getState Returns the state of all applications getSystemMemory Gets the information of System Memory getSystemResourceInfo Returns system resource information about each application getVirtualDisplayEnabled Returns whether virtual display is enabled or disabled for the specified client getVirtualResolution Returns the virtual display resolution for the specified client getVisibility Gets the visibility of the specified client getZOrder Returns an array of clients in Z order, starting with the top most application client first getGraphicsFrameRate Returns the current Graphics Frame Rate hideAllClients Hides/Unhides all the clients hideCursor Hides the cursor from showing on the display hideFullScreenImage Hides the Full Screen Image hideSplashLogo Removes the splash screen ignoreKeyInputs Blocks user key inputs injectKey Injects the keys kill Kills the specified client launch Launches an application launchApplication Launches an application launchResidentApp Launches the Resident application moveBehind Moves the specified client behind the specified target client moveToBack Moves the specified client to the back or bottom of the Z order moveToFront Moves the specified client to the front or top of the Z order removeAllKeyIntercepts Removes all key intercepts removeAllKeyListeners Removes all key listeners removeAnimation Removes the current animation for the specified client removeKeyIntercept Removes a key intercept removeKeyListener Removes a key listener for an application removeKeyMetadataListener Removes the key metadata listeners resetInactivityTime Resets the inactivity notification interval resumeApplication Resumes an application scaleToFit Scales the specified client to fit the current bounds setBounds Sets the bounds of the specified client setCursorSize Sets the cursor size setFocus Sets focus to the specified client setHolePunch Enables or disables video hole punching for the specified client setInactivityInterval Sets the inactivity notification interval setLogLevel Sets the logging level setMemoryMonitor Enables or disables RAM memory monitoring on the device setOpacity Sets the opacity of the specified client setScale Scales an application setScreenResolution Sets the screen resolution setTopmost Sets whether the specified client appears above all other clients on the display setVirtualResolution Sets the virtual resolution for the specified client setVisibility Sets whether the specified client should be visible setGraphicsFrameRate Set Graphics Frame Rate showCursor Shows the cursor on the display using the current cursor size showFullScreenImage Shows the Full Screen Image showSplashLogo Displays the splash screen showWatermark Sets whether a watermark shows on the display suspend Suspends an application suspendApplication Suspends an application keyRepeatConfig Customizes key repeats setAVBlocked adds/removes the list of applications with the given callsigns to/from the blacklist getBlockedAVApplications Gets a list of blacklisted clients <p></p>"},{"location":"RDKShell/#addanimation","title":"addAnimation","text":"<p>The addAnimation API is designed to enhance the visual experience by allowing users to add animations to specific elements or components within an application or display. This function is particularly useful for creating dynamic and engaging user interfaces, improving the overall aesthetic appeal, and providing visual feedback for user interactions. By using addAnimation, users can define and apply animations such as transitions, movements, or effects to elements, making the application more interactive and visually appealing. This API is ideal for scenarios where smooth and visually captivating animations are required to improve user engagement or highlight specific actions or states within the application.</p>"},{"location":"RDKShell/#related-functions","title":"Related Functions","text":"<p>destroy : This function can be used to remove or clean up elements or components, including those with animations, ensuring proper resource management and preventing unnecessary clutter.</p>"},{"location":"RDKShell/#events","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters","title":"Parameters","text":"Name Type Description params object params.animations array A list of animations to perform params.animations[#] object params.animations[#].client string The client name params.animations[#]?.x number <sup>(optional)</sup> The x location params.animations[#]?.y number <sup>(optional)</sup> The y location params.animations[#]?.w number <sup>(optional)</sup> The width params.animations[#]?.h number <sup>(optional)</sup> The height params.animations[#]?.sx number <sup>(optional)</sup> The x scale factor params.animations[#]?.sy number <sup>(optional)</sup> The y scale factor params.animations[#]?.a number <sup>(optional)</sup> The alpha/opacity level to animate to (between 0 and 100) params.animations[#]?.duration number <sup>(optional)</sup> The duration of the animation in seconds params.animations[#]?.tween string <sup>(optional)</sup> The animation tween type. The default is <code>linear</code> (must be one of the following: linear, exp1, exp2, exp3, inquad, incubic, nback, inelastic, outelastic, outbounce) params.animations[#]?.delay number <sup>(optional)</sup> Set delay for an animation"},{"location":"RDKShell/#result","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example","title":"Example","text":""},{"location":"RDKShell/#request","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.addAnimation\",\n    \"params\": {\n        \"animations\": [\n            {\n                \"client\": \"org.rdk.Netflix\",\n                \"x\": 0,\n                \"y\": 0,\n                \"w\": 1920,\n                \"h\": 1080,\n                \"sx\": 0.5,\n                \"sy\": 0.5,\n                \"a\": 0,\n                \"duration\": 2,\n                \"tween\": \"exp1\",\n                \"delay\": 0\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.addAnimation\", \n\"params\":{\"animations\":[{\"client\":\"org.rdk.Netflix\",\"x\":0,\"y\":0,\"w\":1920,\"h\":1080,\"sx\":0.5,\"sy\":0.5,\"a\":0,\"duration\":2,\"tween\":\"exp1\",\"delay\":0}]}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction addAnimation(params) {\n  thunderJS.org.rdk.RDKShell.addAnimation(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"addAnimation({animations: [{client: 'org.rdk.Netflix', x: 0, y: 0, w: 1920, h: 1080, sx: 0.5, sy: 0.5, a: 0, duration: 2, tween: 'exp1', delay: 0}]})\"&gt;addAnimation&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void addAnimation(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"animations\"] = JsonArray();\n    JsonObject animation;\n    animation[\"client\"] = \"org.rdk.Netflix\";\n    animation[\"x\"] = 0;\n    animation[\"y\"] = 0;\n    animation[\"w\"] = 1920;\n    animation[\"h\"] = 1080;\n    animation[\"sx\"] = 0.5;\n    animation[\"sy\"] = 0.5;\n    animation[\"a\"] = 0;\n    animation[\"duration\"] = 2;\n    animation[\"tween\"] = \"exp1\";\n    animation[\"delay\"] = 0;\n    parameters[\"animations\"].Add(animation);\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#addkeyintercept","title":"addKeyIntercept","text":"<p>The addKeyIntercept API is designed to allow users to intercept specific key events before they are processed by the system or application. This function is particularly useful for scenarios where you need to customize or override the default behavior of certain keys. For example, you can use this API to block specific key inputs, remap keys to different actions, or implement custom shortcuts. By intercepting key events, you gain greater control over how the application responds to user input, enabling a more tailored and interactive experience.</p>"},{"location":"RDKShell/#related-functions_1","title":"Related Functions","text":"<p>addKeyIntercepts : Allows you to intercept multiple key events at once, providing a more efficient way to handle bulk key interception. addKeyListener : Enables you to listen for key events, which can complement addKeyIntercept by allowing you to monitor key activity alongside interception. addKeyMetadataListener : Provides metadata about key events, which can be useful for understanding intercepted keys and their context.</p>"},{"location":"RDKShell/#events_1","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_1","title":"Parameters","text":"Name Type Description params object params.keyCode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.modifiers[#] string params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_1","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_1","title":"Example","text":""},{"location":"RDKShell/#request_1","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.addKeyIntercept\",\n    \"params\": {\n        \"keyCode\": 10,\n        \"modifiers\": [\n            \"shift\"\n        ],\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_1","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.addKeyIntercept\", \n\"params\":{\"keyCode\":13,\"modifiers\":[\"ctrl\",\"shift\"]}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction addKeyIntercept(params) {\n  thunderJS.org.rdk.RDKShell.addKeyIntercept(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"addKeyIntercept({keyCode: 13, modifiers: ['ctrl', 'shift']})\"&gt;addKeyIntercept&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void addKeyIntercept(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"keyCode\"] = 13;\n    parameters[\"modifiers\"] = JsonArray({ \"ctrl\", \"shift\" });\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#addkeyintercepts","title":"addKeyIntercepts","text":"<p>The <code>addKeyIntercepts</code> function is designed to allow users to specify a list of keys that should be intercepted by the system. When a key is intercepted, it prevents the default behavior associated with that key from being executed. This is particularly useful in scenarios where you want to override or customize the behavior of specific keys, such as in gaming applications, custom user interfaces, or specialized workflows. By using this function, you can ensure that the specified keys are handled exclusively by your application, providing greater control over user interactions.</p>"},{"location":"RDKShell/#related-functions_2","title":"Related Functions","text":"<p>addKeyIntercept : Allows interception of a single key, providing a more granular approach compared to <code>addKeyIntercepts</code>. addKeyListener : Enables listening for key events, which can complement the use of <code>addKeyIntercepts</code> by allowing you to define custom actions for intercepted keys.</p>"},{"location":"RDKShell/#events_2","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_2","title":"Parameters","text":"Name Type Description params object params.intercepts array A list of intercepts params.intercepts[#] object params.intercepts[#].client string The client name params.intercepts[#].keys array A list of keys to simulate params.intercepts[#].keys[#] object params.intercepts[#].keys[#].keycode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.intercepts[#].keys[#].modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.intercepts[#].keys[#].modifiers[#] string"},{"location":"RDKShell/#result_2","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_2","title":"Example","text":""},{"location":"RDKShell/#request_2","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.addKeyIntercepts\",\n    \"params\": {\n        \"intercepts\": [\n            {\n                \"client\": \"searchanddiscovery\",\n                \"keys\": [\n                    {\n                        \"keycode\": 10,\n                        \"modifiers\": [\n                            \"shift\"\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_2","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.addKeyIntercepts\", \n\"params\":{\"keys\":[{\"keyCode\":13,\"modifiers\":[\"ctrl\",\"shift\"]}]}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction addKeyIntercepts(params) {\n  thunderJS.addKeyIntercepts(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"addKeyIntercepts({ keys: [{ keyCode: 13, modifiers: ['ctrl', 'shift'] }] })\"&gt;addKeyIntercepts&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void addKeyIntercepts(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"keys\"] = JsonArray();\n    JsonObject keyObject;\n    keyObject[\"keyCode\"] = 13;\n    keyObject[\"modifiers\"] = JsonArray();\n    keyObject[\"modifiers\"].Add(\"ctrl\");\n    keyObject[\"modifiers\"].Add(\"shift\");\n    parameters[\"keys\"].Add(keyObject);\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#addkeylistener","title":"addKeyListener","text":"<p>The <code>addKeyListener</code> function is designed to allow users to monitor and respond to specific key events. By using this function, you can attach a listener that will be triggered whenever a particular key or set of keys is pressed or released. This is particularly useful for creating interactive applications, such as games, remote controls, or any system that requires real-time key input handling. The function ensures that your application can react dynamically to user input, enhancing the overall user experience. </p>"},{"location":"RDKShell/#related-functions_3","title":"Related Functions","text":"<p>addKeyIntercept : Allows you to intercept specific key events before they are processed by the system, enabling you to override default behaviors. addKeyIntercepts : Similar to <code>addKeyIntercept</code>, but allows you to intercept multiple key events at once. addKeyMetadataListener : Enables you to listen for metadata associated with key events, providing additional context about the key actions.</p>"},{"location":"RDKShell/#events_3","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_3","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.keys array A list of keys on which to add a listener for the specified application params.keys[#] object params.keys[#].keyCode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.keys[#]?.nativekeyCode number <sup>(optional)</sup> The native key code params.keys[#].modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.keys[#].modifiers[#] string params.keys[#].activate boolean Activate an application on key  The default is <code>false</code> params.keys[#].propagate boolean Propagate to the next application in the z-order. The default is <code>true</code>"},{"location":"RDKShell/#result_3","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_3","title":"Example","text":""},{"location":"RDKShell/#request_3","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.addKeyListener\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"keys\": [\n            {\n                \"keyCode\": 10,\n                \"nativekeyCode\": 10,\n                \"modifiers\": [\n                    \"shift\"\n                ],\n                \"activate\": false,\n                \"propagate\": true\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_3","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.addKeyListener\", \n\"params\":{\"keyCode\":13, \"client\":\"HtmlApp\", \"activate\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction addKeyListener(params) {\n  thunderJS.org.rdk.RDKShell.addKeyListener(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"addKeyListener({keyCode: 13, client: 'HtmlApp', activate: true})\"&gt;addKeyListener&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void addKeyListener(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"keyCode\"] = 13;\n    parameters[\"client\"] = \"HtmlApp\";\n    parameters[\"activate\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#addkeymetadatalistener","title":"addKeyMetadataListener","text":"<p>The <code>addKeyMetadataListener</code> function is designed to allow users to monitor and respond to metadata associated with key events. This function is particularly useful in scenarios where additional context or information about key inputs is required, such as tracking specific attributes or properties of a key press. By using this function, users can enhance their interaction handling by accessing detailed metadata, enabling more informed decision-making or customized responses to key events. This is ideal for applications that require advanced input handling or need to process key events with supplementary data.</p>"},{"location":"RDKShell/#related-functions_4","title":"Related Functions","text":"<p>addKeyListener : Provides a way to listen for key events, focusing on the key press or release actions without metadata.</p>"},{"location":"RDKShell/#events_4","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_4","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_4","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_4","title":"Example","text":""},{"location":"RDKShell/#request_4","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.addKeyMetadataListener\",\n    \"params\": {\n        \"client\": \"searchanddiscovery\",\n        \"callsign\": \"searchanddiscovery\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_4","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.addKeyMetadataListener\", \n\"params\":{\"client\":\"searchanddiscovery\", \"callsign\":\"searchanddiscovery\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction addKeyMetadataListener(params) {\n  thunderJS.addKeyMetadataListener(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"addKeyMetadataListener({client: 'searchanddiscovery', callsign: 'searchanddiscovery'})\"&gt;addKeyMetadataListener&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void addKeyMetadataListener(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"client\"] = \"searchanddiscovery\";\n    parameters[\"callsign\"] = \"searchanddiscovery\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#createdisplay","title":"createDisplay","text":"<p>The <code>createDisplay</code> function is used to initialize and set up a display environment for rendering visual content. This function is essential for applications that require a graphical interface or need to present information visually to users. By invoking <code>createDisplay</code>, users can create a virtual or physical display instance that serves as the foundation for rendering animations, graphics, or other visual elements. It is particularly useful in scenarios where multiple displays are needed or when working with virtual environments. This function ensures that the display is properly configured and ready for use, enabling seamless integration with other graphical or interactive components.</p>"},{"location":"RDKShell/#related-functions_5","title":"Related Functions","text":"<p>destroy : Used to terminate or remove the display created by <code>createDisplay</code>.</p>"},{"location":"RDKShell/#events_5","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_5","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.displayName string A name for the display params.displayWidth number The width of the display params.displayHeight number The height of the display params.virtualDisplay boolean Whether to create a virtual display (<code>true</code>) or not (<code>false</code>) params.virtualWidth number The width of the virtual display params.virtualHeight number The height of the virtual display params?.topmost boolean <sup>(optional)</sup> Whether to set topmost (true) or not (false) params?.focus boolean <sup>(optional)</sup> Whether to setfocus (true) or not (false)"},{"location":"RDKShell/#result_5","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_5","title":"Example","text":""},{"location":"RDKShell/#request_5","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.createDisplay\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"displayName\": \"test\",\n        \"displayWidth\": 1920,\n        \"displayHeight\": 1080,\n        \"virtualDisplay\": true,\n        \"virtualWidth\": 1920,\n        \"virtualHeight\": 1080,\n        \"topmost\": false,\n        \"focus\": false\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_5","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.createDisplay\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction createDisplay() {\n  thunderJS.org.rdk.RDKShell.createDisplay()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"createDisplay()\"&gt;createDisplay&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void createDisplay(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#destroy","title":"destroy","text":"<p>The <code>destroy</code> function is used to terminate or dismantle a specific resource, object, or instance that was previously created. This function ensures that all associated resources, such as memory, connections, or other dependencies, are properly released and cleaned up. It is particularly useful for preventing resource leaks and maintaining optimal system performance. Users should call this function when the resource is no longer needed to ensure efficient resource management. Once the <code>destroy</code> function is invoked, the associated resource becomes inaccessible and cannot be reused.</p>"},{"location":"RDKShell/#related-functions_6","title":"Related Functions","text":"<p>createDisplay : The <code>createDisplay</code> function is used to initialize or create a display resource. It is often paired with the <code>destroy</code> function to ensure proper lifecycle management of the display resource.</p>"},{"location":"RDKShell/#events_6","title":"Events","text":"Event Description onDestroyed Triggers when a runtime is successfully destroyed ### Parameters Name Type Description params object params.callsign string The application callsign"},{"location":"RDKShell/#result_6","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_6","title":"Example","text":""},{"location":"RDKShell/#request_6","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.destroy\",\n    \"params\": {\n        \"callsign\": \"Cobalt\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_6","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.suspend\", \n\"params\":{\"callsign\":\"Cobalt\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction suspend(params) {\n  thunderJS.org.rdk.RDKShell.suspend(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"suspend({callsign: 'Cobalt'})\"&gt;suspend&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void suspend(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"callsign\"] = \"Cobalt\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#enableinactivityreporting","title":"enableInactivityReporting","text":"<p>The <code>enableInactivityReporting</code> function is designed to monitor and report periods of inactivity within a system or application. When enabled, this function tracks user inactivity, such as the absence of input or interaction, and triggers notifications or logs based on predefined thresholds. This feature is particularly useful for applications that require user engagement tracking, session management, or security measures, such as locking the system after prolonged inactivity. By enabling inactivity reporting, users can ensure better control over idle states, improve resource management, and enhance user experience by implementing appropriate actions during inactivity.</p>"},{"location":"RDKShell/#related-functions_7","title":"Related Functions","text":"<p>None</p>"},{"location":"RDKShell/#events_7","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_6","title":"Parameters","text":"Name Type Description params object params.enable boolean Whether to enable (<code>true</code>) or disable (<code>false</code>) inactivity reporting"},{"location":"RDKShell/#result_7","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_7","title":"Example","text":""},{"location":"RDKShell/#request_7","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.enableInactivityReporting\",\n    \"params\": {\n        \"enable\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_7","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.enableInactivityReporting\", \n\"params\":{\"enable\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction enableInactivityReporting(enable) {\n  thunderJS.enableInactivityReporting(enable)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"enableInactivityReporting(true)\"&gt;enableInactivityReporting&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void enableInactivityReporting(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enable\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#enablekeyrepeats","title":"enableKeyRepeats","text":"<p>The <code>enableKeyRepeats</code> function is used to control whether key repeat events are enabled or disabled for a system or application. When key repeats are enabled, holding down a key will generate repeated key press events at regular intervals, which can be useful for scenarios like text input, gaming, or any application where continuous key press actions are required. Disabling key repeats ensures that only a single key press event is registered, regardless of how long the key is held down. This function is particularly useful for customizing user input behavior based on the application's requirements, enhancing usability and responsiveness.</p>"},{"location":"RDKShell/#related-functions_8","title":"Related Functions","text":"<p>addKeyListener : Allows you to add a listener for key press events, which can be used in conjunction with <code>enableKeyRepeats</code> to handle repeated key presses effectively.</p>"},{"location":"RDKShell/#events_8","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_7","title":"Parameters","text":"Name Type Description params object params.enable boolean Whether to enable (<code>true</code>) or disable (<code>false</code>) key repeats"},{"location":"RDKShell/#result_8","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_8","title":"Example","text":""},{"location":"RDKShell/#request_8","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.enableKeyRepeats\",\n    \"params\": {\n        \"enable\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_8","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.enableKeyRepeats\", \n\"params\":{\"enable\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction enableKeyRepeats(enable) {\n  thunderJS.org.rdk.RDKShell.enableKeyRepeats(enable)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"enableKeyRepeats(true)\"&gt;enableKeyRepeats&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void org_rdk_RDKShell_enableKeyRepeats(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enable\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#enablelogsflushing","title":"enableLogsFlushing","text":"<p>The <code>enableLogsFlushing</code> function is designed to ensure that log data is consistently written and stored, preventing any loss of critical information during application runtime. This function is particularly useful in scenarios where real-time monitoring or debugging is required, as it forces the system to flush logs to their designated storage or output location immediately. By enabling log flushing, users can maintain a reliable record of application events, errors, and other operational details, which can be crucial for troubleshooting, performance analysis, or compliance purposes. This function is ideal for applications that handle sensitive or high-priority data, where missing logs could lead to significant issues.</p>"},{"location":"RDKShell/#related-functions_9","title":"Related Functions","text":"<p>None</p>"},{"location":"RDKShell/#events_9","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_8","title":"Parameters","text":"Name Type Description params object params.enable boolean Whether to enable (<code>true</code>) or disable (<code>false</code>) log flushing"},{"location":"RDKShell/#result_9","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_9","title":"Example","text":""},{"location":"RDKShell/#request_9","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.enableLogsFlushing\",\n    \"params\": {\n        \"enable\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_9","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.enableLogsFlushing\", \n\"params\":{\"enable\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction enableLogsFlushing(enable) {\n  thunderJS.org.rdk.RDKShell.enableLogsFlushing({ enable: enable })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"enableLogsFlushing(true)\"&gt;enableLogsFlushing&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void enableLogsFlushing(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enable\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#enablevirtualdisplay","title":"enableVirtualDisplay","text":"<p>The enableVirtualDisplay function is designed to activate a virtual display environment, allowing users to simulate or emulate a display without relying on physical hardware. This is particularly useful in scenarios where testing, debugging, or running applications in a controlled environment is required. By enabling a virtual display, users can create a flexible and customizable workspace that mimics the behavior of a real display, making it ideal for remote operations, automation, or scenarios where physical displays are unavailable or impractical. This function enhances accessibility and efficiency by providing a virtual alternative to traditional display setups.</p>"},{"location":"RDKShell/#related-functions_10","title":"Related Functions","text":"<p>createDisplay : Used to create a new display instance, which can complement the virtual display setup.</p>"},{"location":"RDKShell/#events_10","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_9","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.enable boolean Whether to enable (<code>true</code>) or disable (<code>false</code>) a virtual display"},{"location":"RDKShell/#result_10","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_10","title":"Example","text":""},{"location":"RDKShell/#request_10","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.enableVirtualDisplay\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"enable\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_10","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.enableVirtualDisplay\", \n\"params\":{\"client\":\"org.rdk.Netflix\",\"callsign\":\"org.rdk.Netflix\",\"enable\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction enableVirtualDisplay(params) {\n  thunderJS.enableVirtualDisplay(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"enableVirtualDisplay({client: 'org.rdk.Netflix', callsign: 'org.rdk.Netflix', enable: true})\"&gt;enableVirtualDisplay&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void enableVirtualDisplay(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"client\"] = \"org.rdk.Netflix\";\n    parameters[\"callsign\"] = \"org.rdk.Netflix\";\n    parameters[\"enable\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#generatekey","title":"generateKey","text":"<p>The generateKey API is used to create a unique key or identifier that can be utilized for various purposes, such as authentication, encryption, or tracking within a system. This function is particularly useful when there is a need to generate secure and distinct keys dynamically, ensuring that no two keys are identical. It is designed to simplify the process of key generation, making it accessible for users who require a reliable method to produce unique identifiers without delving into complex algorithms or manual processes. The generated key can be used in scenarios like securing data, managing access control, or identifying specific entities within an application.</p>"},{"location":"RDKShell/#related-functions_11","title":"Related Functions","text":"<p>None</p>"},{"location":"RDKShell/#events_11","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_10","title":"Parameters","text":"Name Type Description params object params.keys array A list of keys to simulate params.keys[#] object params.keys[#].keyCode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.keys[#].modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.keys[#].modifiers[#] string params.keys[#].delay number The amount of time to wait (in seconds) before sending the key event params.keys[#]?.callsign string <sup>(optional)</sup> The application callsign params.keys[#]?.client string <sup>(optional)</sup> The client name can be used instead of callsign"},{"location":"RDKShell/#result_11","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_11","title":"Example","text":""},{"location":"RDKShell/#request_11","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.generateKey\",\n    \"params\": {\n        \"keys\": [\n            {\n                \"keyCode\": 10,\n                \"modifiers\": [\n                    \"shift\"\n                ],\n                \"delay\": 1.0,\n                \"callsign\": \"Cobalt\",\n                \"client\": \"Cobalt\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_11","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.RDKShell.generateKey\", \n\"params\":{\"input\":\"keyboard\", \n\"enabled\":true, \n\"initialDelay\":500, \n\"repeatInterval\":100}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction generateKey(params) {\n  thunderJS.org.rdk.RDKShell.generateKey(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"generateKey({input: 'keyboard', enabled: true, initialDelay: 500, repeatInterval: 100})\"&gt;generateKey&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void generateKey(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"input\"] = \"keyboard\";\n    parameters[\"enabled\"] = true;\n    parameters[\"initialDelay\"] = 500;\n    parameters[\"repeatInterval\"] = 100;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getavailabletypes","title":"getAvailableTypes","text":"<p>Returns the list of application types available on the firmware.</p>"},{"location":"RDKShell/#events_12","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_11","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_12","title":"Result","text":"Name Type Description result object result.types array application types result.types[#] string result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_12","title":"Example","text":""},{"location":"RDKShell/#request_12","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getAvailableTypes\"\n}\n</code></pre>"},{"location":"RDKShell/#response_12","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"types\": [\n            \"HtmlBrowser\"\n        ],\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getbounds","title":"getBounds","text":"<p>Gets the bounds of the specified client.</p>"},{"location":"RDKShell/#events_13","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_12","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_13","title":"Result","text":"Name Type Description result object result.bounds object result.bounds.x number The x location result.bounds.y number The y location result.bounds.w number The width result.bounds.h number The height result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_13","title":"Example","text":""},{"location":"RDKShell/#request_13","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getBounds\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_13","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"bounds\": {\n            \"x\": 0,\n            \"y\": 0,\n            \"w\": 1920,\n            \"h\": 1080\n        },\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getclients","title":"getClients","text":"<p>Gets a list of clients.</p>"},{"location":"RDKShell/#events_14","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_13","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_14","title":"Result","text":"Name Type Description result object result.clients array A list of clients result.clients[#] string result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_14","title":"Example","text":""},{"location":"RDKShell/#request_14","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getClients\"\n}\n</code></pre>"},{"location":"RDKShell/#response_14","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"clients\": [\n            \"org.rdk.Netflix\"\n        ],\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getcursorsize","title":"getCursorSize","text":"<p>Returns the currently set cursor size.</p>"},{"location":"RDKShell/#events_15","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_14","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_15","title":"Result","text":"Name Type Description result object result.width number The cursor width result.height number The cursor height result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_15","title":"Example","text":""},{"location":"RDKShell/#request_15","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getCursorSize\"\n}\n</code></pre>"},{"location":"RDKShell/#response_15","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"width\": 255,\n        \"height\": 255,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getholepunch","title":"getHolePunch","text":"<p>Returns whether video hole punching is enabled or disabled for the specified client.</p>"},{"location":"RDKShell/#events_16","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_15","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_16","title":"Result","text":"Name Type Description result object result.holePunch boolean Whether hole punching is enabled (<code>true</code>) or disabled (<code>false</code>) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_16","title":"Example","text":""},{"location":"RDKShell/#request_16","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getHolePunch\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_16","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"holePunch\": true,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getkeyrepeatsenabled","title":"getKeyRepeatsEnabled","text":"<p>Returns whether key repeating is enabled or disabled.</p>"},{"location":"RDKShell/#events_17","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_16","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_17","title":"Result","text":"Name Type Description result object result.keyRepeat boolean <code>true</code> if enabled, otherwise <code>false</code> result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_17","title":"Example","text":""},{"location":"RDKShell/#request_17","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getKeyRepeatsEnabled\"\n}\n</code></pre>"},{"location":"RDKShell/#response_17","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"keyRepeat\": true,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getlastwakeupkey","title":"getLastWakeupKey","text":"<p>Returns the last key press prior to a device wakeup.</p>"},{"location":"RDKShell/#events_18","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_17","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_18","title":"Result","text":"Name Type Description result object result.keyCode number The key code of the key to intercept (only symbol * (string data type) is acceptable) result.modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) result.modifiers[#] string result.timestampInSeconds boolean The time, in seconds, of the last wakeup result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_18","title":"Example","text":""},{"location":"RDKShell/#request_18","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getLastWakeupKey\"\n}\n</code></pre>"},{"location":"RDKShell/#response_18","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"keyCode\": 10,\n        \"modifiers\": [\n            \"shift\"\n        ],\n        \"timestampInSeconds\": true,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getloglevel","title":"getLogLevel","text":"<p>Returns the currently set logging level.</p>"},{"location":"RDKShell/#events_19","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_18","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_19","title":"Result","text":"Name Type Description result object result.logLevel string The log level (must be one of the following: DEBUG, INFO, WARN, ERROR, FATAL) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_19","title":"Example","text":""},{"location":"RDKShell/#request_19","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getLogLevel\"\n}\n</code></pre>"},{"location":"RDKShell/#response_19","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"logLevel\": \"INFO\",\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getlogsflushingenabled","title":"getLogsFlushingEnabled","text":"<p>Returns whether log flushing is enabled or disabled.</p>"},{"location":"RDKShell/#events_20","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_19","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_20","title":"Result","text":"Name Type Description result object result.enabled boolean <code>true</code> if enabled, otherwise <code>false</code> result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_20","title":"Example","text":""},{"location":"RDKShell/#request_20","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getLogsFlushingEnabled\"\n}\n</code></pre>"},{"location":"RDKShell/#response_20","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"enabled\": true,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getopacity","title":"getOpacity","text":"<p>Gets the opacity of the specified client.</p>"},{"location":"RDKShell/#events_21","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_20","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#result_21","title":"Result","text":"Name Type Description result object result.opacity integer The opacity level (between 0 and 100) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_21","title":"Example","text":""},{"location":"RDKShell/#request_21","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getOpacity\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_21","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"opacity\": 100,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getscale","title":"getScale","text":"<p>Returns the scale of an application.</p>"},{"location":"RDKShell/#events_22","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_21","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#result_22","title":"Result","text":"Name Type Description result object result.sx string The x scale factor result.sy string The y scale factor result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_22","title":"Example","text":""},{"location":"RDKShell/#request_22","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getScale\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_22","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"sx\": \"0.5\",\n        \"sy\": \"0.5\",\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getscreenresolution","title":"getScreenResolution","text":"<p>Gets the screen resolution.</p>"},{"location":"RDKShell/#events_23","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_22","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_23","title":"Result","text":"Name Type Description result object result.w number The width result.h number The height result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_23","title":"Example","text":""},{"location":"RDKShell/#request_23","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getScreenResolution\"\n}\n</code></pre>"},{"location":"RDKShell/#response_23","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"w\": 1920,\n        \"h\": 1080,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getscreenshot","title":"getScreenshot","text":"<p>Captures a screenshot.</p>"},{"location":"RDKShell/#events_24","title":"Events","text":"Event Description onScreenshotComplete Triggers when a screenshot is captured successfully ### Parameters <p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_24","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_24","title":"Example","text":""},{"location":"RDKShell/#request_24","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getScreenshot\"\n}\n</code></pre>"},{"location":"RDKShell/#response_24","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getstate","title":"getState","text":"<p>Returns the state of all applications.</p>"},{"location":"RDKShell/#events_25","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_23","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_25","title":"Result","text":"Name Type Description result object result.runtimes array A list of apps and their current state result.runtimes[#] object result.runtimes[#].callsign string The application callsign result.runtimes[#].state string The runtime state of the app result.runtimes[#].uri string The URI of the app (empty, if unable to get URI status) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_25","title":"Example","text":""},{"location":"RDKShell/#request_25","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getState\"\n}\n</code></pre>"},{"location":"RDKShell/#response_25","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"runtimes\": [\n            {\n                \"callsign\": \"Cobalt\",\n                \"state\": \"suspended\",\n                \"uri\": \"https://...\"\n            }\n        ],\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getsystemmemory","title":"getSystemMemory","text":"<p>Gets the information of System Memory.</p>"},{"location":"RDKShell/#events_26","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_24","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_26","title":"Result","text":"Name Type Description result object result.freeRam number Free RAM memory (kB) result.swapRam number Swap memory (kB) result.totalRam number Total RAM memory (kB) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_26","title":"Example","text":""},{"location":"RDKShell/#request_26","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getSystemMemory\"\n}\n</code></pre>"},{"location":"RDKShell/#response_26","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"freeRam\": 321944,\n        \"swapRam\": 0,\n        \"totalRam\": 624644,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getsystemresourceinfo","title":"getSystemResourceInfo","text":"<p>Returns system resource information about each application.</p>"},{"location":"RDKShell/#events_27","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_25","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_27","title":"Result","text":"Name Type Description result object result.types array A list of apps and their system resource information result.types[#] object result.types[#].callsign string The application callsign result.types[#].ram integer The amount of memory the runtime is consuming in kb result.types[#].vram integer The amount of graphics memory the runtime is consuming in kb (if supported) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_27","title":"Example","text":""},{"location":"RDKShell/#request_27","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getSystemResourceInfo\"\n}\n</code></pre>"},{"location":"RDKShell/#response_27","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"types\": [\n            {\n                \"callsign\": \"Cobalt\",\n                \"ram\": 123,\n                \"vram\": 50\n            }\n        ],\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getvirtualdisplayenabled","title":"getVirtualDisplayEnabled","text":"<p>Returns whether virtual display is enabled or disabled for the specified client.</p>"},{"location":"RDKShell/#events_28","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_26","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_28","title":"Result","text":"Name Type Description result object result.enabled boolean <code>true</code> if a virtual display is enabled, otherwise <code>false</code> result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_28","title":"Example","text":""},{"location":"RDKShell/#request_28","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getVirtualDisplayEnabled\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_28","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"enabled\": true,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getvirtualresolution","title":"getVirtualResolution","text":"<p>Returns the virtual display resolution for the specified client.</p>"},{"location":"RDKShell/#events_29","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_27","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_29","title":"Result","text":"Name Type Description result object result.w number The width result.h number The height result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_29","title":"Example","text":""},{"location":"RDKShell/#request_29","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getVirtualResolution\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_29","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"w\": 1920,\n        \"h\": 1080,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getvisibility","title":"getVisibility","text":"<p>Gets the visibility of the specified client.</p>"},{"location":"RDKShell/#events_30","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_28","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_30","title":"Result","text":"Name Type Description result object result.visible boolean Whether the client is visible (<code>true</code>) or not (<code>false</code>) result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_30","title":"Example","text":""},{"location":"RDKShell/#request_30","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getVisibility\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_30","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"visible\": true,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getzorder","title":"getZOrder","text":"<p>Returns an array of clients in Z order, starting with the top most application client first.</p>"},{"location":"RDKShell/#events_31","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_29","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_31","title":"Result","text":"Name Type Description result object result.clients array A list of clients result.clients[#] string result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_31","title":"Example","text":""},{"location":"RDKShell/#request_31","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getZOrder\"\n}\n</code></pre>"},{"location":"RDKShell/#response_31","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"clients\": [\n            \"org.rdk.Netflix\"\n        ],\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getgraphicsframerate","title":"getGraphicsFrameRate","text":"<p>Returns the current Graphics Frame Rate.</p>"},{"location":"RDKShell/#events_32","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_30","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_32","title":"Result","text":"Name Type Description result object result.frameRate number display the current Graphics framerate result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_32","title":"Example","text":""},{"location":"RDKShell/#request_32","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getGraphicsFrameRate\"\n}\n</code></pre>"},{"location":"RDKShell/#response_32","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"frameRate\": 40,\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#hideallclients","title":"hideAllClients","text":"<p>Hides/Unhides all the clients.</p>"},{"location":"RDKShell/#events_33","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_31","title":"Parameters","text":"Name Type Description params object params.hide boolean true to hide all the clients, and false to unhide all the clients"},{"location":"RDKShell/#result_33","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_33","title":"Example","text":""},{"location":"RDKShell/#request_33","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.hideAllClients\",\n    \"params\": {\n        \"hide\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_33","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#hidecursor","title":"hideCursor","text":"<p>Hides the cursor from showing on the display. The cursor is hidden by default.</p>"},{"location":"RDKShell/#events_34","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_32","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_34","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_34","title":"Example","text":""},{"location":"RDKShell/#request_34","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.hideCursor\"\n}\n</code></pre>"},{"location":"RDKShell/#response_34","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#hidefullscreenimage","title":"hideFullScreenImage","text":"<p>Hides the Full Screen Image.</p>"},{"location":"RDKShell/#events_35","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_33","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_35","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_35","title":"Example","text":""},{"location":"RDKShell/#request_35","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.hideFullScreenImage\"\n}\n</code></pre>"},{"location":"RDKShell/#response_35","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#hidesplashlogo","title":"hideSplashLogo","text":"<p>Removes the splash screen.</p>"},{"location":"RDKShell/#events_36","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_34","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_36","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_36","title":"Example","text":""},{"location":"RDKShell/#request_36","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.hideSplashLogo\"\n}\n</code></pre>"},{"location":"RDKShell/#response_36","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#ignorekeyinputs","title":"ignoreKeyInputs","text":"<p>Blocks user key inputs.</p>"},{"location":"RDKShell/#events_37","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_35","title":"Parameters","text":"Name Type Description params object params.ignore boolean Whether key inputs are ignored"},{"location":"RDKShell/#result_37","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_37","title":"Example","text":""},{"location":"RDKShell/#request_37","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.ignoreKeyInputs\",\n    \"params\": {\n        \"ignore\": false\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_37","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#injectkey","title":"injectKey","text":"<p>Injects the keys.</p>"},{"location":"RDKShell/#events_38","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_36","title":"Parameters","text":"Name Type Description params object params.keycode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.modifiers[#] string"},{"location":"RDKShell/#result_38","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_38","title":"Example","text":""},{"location":"RDKShell/#request_38","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.injectKey\",\n    \"params\": {\n        \"keycode\": 10,\n        \"modifiers\": [\n            \"shift\"\n        ]\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_38","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#kill","title":"kill","text":"<p>Kills the specified client.</p>"},{"location":"RDKShell/#events_39","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_37","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_39","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_39","title":"Example","text":""},{"location":"RDKShell/#request_39","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.kill\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_39","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#launch","title":"launch","text":"<p>Launches an application.</p>"},{"location":"RDKShell/#events_40","title":"Events","text":"Event Description onLaunched Triggers when the runtime of an application is launched successfull ### Parameters Name Type Description params object params.callsign string The application callsign params.type string The ID of the runtime package or the callsign of the plugin desired to be cloned params?.version string <sup>(optional)</sup> The version of the package. Defaults to the latest version params.uri string The URI of the app (empty, if unable to get URI status) params?.x number <sup>(optional)</sup> The x location params?.y number <sup>(optional)</sup> The y location params?.w number <sup>(optional)</sup> The width params?.h number <sup>(optional)</sup> The height params?.suspend boolean <sup>(optional)</sup> Whether to suspend the app on launch (<code>true</code>) or not (<code>false</code>). Default is <code>false</code> params?.visible boolean <sup>(optional)</sup> Whether the app is visible on launch (<code>true</code>) or not (<code>false</code>). Default is <code>true</code>. The value will be <code>false</code> if the <code>suspend</code> argument is <code>true</code> params?.focused boolean <sup>(optional)</sup> Whether the app is focused on launch (<code>true</code>) or not (<code>false</code>). Default is <code>true</code>. The app cannot be focused if the <code>visible</code> argument is set to <code>false</code> params?.configuration string <sup>(optional)</sup> The plugin configuration overrides. Empty by default params?.behind string <sup>(optional)</sup> The client to put behind. Defaults to top of z-order params?.displayName string <sup>(optional)</sup> A name for the display params?.scaleToFit boolean <sup>(optional)</sup> Whether the app can be scaled to fit the current bounds. Default is <code>false</code> params?.holePunch boolean <sup>(optional)</sup> Whether the video hole punching can be enabled for the client. Default is <code>true</code> params?.topmost boolean <sup>(optional)</sup> Whether the app appears above all other apps on the display. Default is <code>false</code> params?.focus boolean <sup>(optional)</sup> Whether the app should be under focus. Default is <code>false</code> params?.autodestroy boolean <sup>(optional)</sup> Whether the application can be automatically destroyed. Default is <code>true</code>"},{"location":"RDKShell/#result_40","title":"Result","text":"Name Type Description result object result.launchType string The launch type of client result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_40","title":"Example","text":""},{"location":"RDKShell/#request_40","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.launch\",\n    \"params\": {\n        \"callsign\": \"Cobalt\",\n        \"type\": \"HtmlApp\",\n        \"version\": \"1.0\",\n        \"uri\": \"https://...\",\n        \"x\": 0,\n        \"y\": 0,\n        \"w\": 1920,\n        \"h\": 1080,\n        \"suspend\": false,\n        \"visible\": true,\n        \"focused\": true,\n        \"configuration\": \"...\",\n        \"behind\": \"...\",\n        \"displayName\": \"test\",\n        \"scaleToFit\": false,\n        \"holePunch\": false,\n        \"topmost\": false,\n        \"focus\": false,\n        \"autodestroy\": false\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_40","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"launchType\": \"activate\",\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#launchapplication","title":"launchApplication","text":"<p>Launches an application.</p>"},{"location":"RDKShell/#events_41","title":"Events","text":"Event Description onApplicationLaunched Triggers when an application is launched successfully ### Parameters Name Type Description params object params.client string The client name params.uri string The client uri params.mimeType string The mime type params?.topmost boolean <sup>(optional)</sup> true to put the application at the top, otherwise false params?.focus boolean <sup>(optional)</sup> true to put the application above all other applications, otherwise false"},{"location":"RDKShell/#result_41","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_41","title":"Example","text":""},{"location":"RDKShell/#request_41","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.launchApplication\",\n    \"params\": {\n        \"client\": \"HtmlApp\",\n        \"uri\": \"https://x1box-app.xumo.com/3.0.70/index.html%22\",\n        \"mimeType\": \"application/native\",\n        \"topmost\": true,\n        \"focus\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_41","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#launchresidentapp","title":"launchResidentApp","text":"<p>Launches the Resident application.</p>"},{"location":"RDKShell/#events_42","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_38","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_42","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_42","title":"Example","text":""},{"location":"RDKShell/#request_42","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.launchResidentApp\"\n}\n</code></pre>"},{"location":"RDKShell/#response_42","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#movebehind","title":"moveBehind","text":"<p>Moves the specified client behind the specified target client.</p>"},{"location":"RDKShell/#events_43","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_39","title":"Parameters","text":"Name Type Description params object params.client string The client name params.target string The target in which the client moves behind"},{"location":"RDKShell/#result_43","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_43","title":"Example","text":""},{"location":"RDKShell/#request_43","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.moveBehind\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"target\": \"org.rdk.RDKBrowser2\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_43","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#movetoback","title":"moveToBack","text":"<p>Moves the specified client to the back or bottom of the Z order.</p>"},{"location":"RDKShell/#events_44","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_40","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_44","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_44","title":"Example","text":""},{"location":"RDKShell/#request_44","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.moveToBack\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_44","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#movetofront","title":"moveToFront","text":"<p>Moves the specified client to the front or top of the Z order.</p>"},{"location":"RDKShell/#events_45","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_41","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_45","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_45","title":"Example","text":""},{"location":"RDKShell/#request_45","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.moveToFront\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_45","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#removeallkeyintercepts","title":"removeAllKeyIntercepts","text":"<p>Removes all key intercepts.</p>"},{"location":"RDKShell/#events_46","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_42","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_46","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_46","title":"Example","text":""},{"location":"RDKShell/#request_46","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.removeAllKeyIntercepts\"\n}\n</code></pre>"},{"location":"RDKShell/#response_46","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#removeallkeylisteners","title":"removeAllKeyListeners","text":"<p>Removes all key listeners.</p>"},{"location":"RDKShell/#events_47","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_43","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_47","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_47","title":"Example","text":""},{"location":"RDKShell/#request_47","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.removeAllKeyListeners\"\n}\n</code></pre>"},{"location":"RDKShell/#response_47","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#removeanimation","title":"removeAnimation","text":"<p>Removes the current animation for the specified client.</p>"},{"location":"RDKShell/#events_48","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_44","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_48","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_48","title":"Example","text":""},{"location":"RDKShell/#request_48","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.removeAnimation\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_48","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#removekeyintercept","title":"removeKeyIntercept","text":"<p>Removes a key intercept.</p>"},{"location":"RDKShell/#events_49","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_45","title":"Parameters","text":"Name Type Description params object params.keyCode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.modifiers[#] string params.client string The client name"},{"location":"RDKShell/#result_49","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_49","title":"Example","text":""},{"location":"RDKShell/#request_49","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.removeKeyIntercept\",\n    \"params\": {\n        \"keyCode\": 10,\n        \"modifiers\": [\n            \"shift\"\n        ],\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_49","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#removekeylistener","title":"removeKeyListener","text":"<p>Removes a key listener for an application.</p>"},{"location":"RDKShell/#events_50","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_46","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.keys array A list of keys for which to remove a listener for the specified application (only symbol * (string data type) is acceptable) params.keys[#] object params.keys[#].keyCode number The key code of the key to intercept (only symbol * (string data type) is acceptable) params.keys[#].modifiers array A list of modifiers that need to be present to intercept (<code>ctrl</code>, <code>alt</code>, and <code>shift</code> are supported) params.keys[#].modifiers[#] string"},{"location":"RDKShell/#result_50","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_50","title":"Example","text":""},{"location":"RDKShell/#request_50","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.removeKeyListener\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"keys\": [\n            {\n                \"keyCode\": 10,\n                \"modifiers\": [\n                    \"shift\"\n                ]\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_50","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#removekeymetadatalistener","title":"removeKeyMetadataListener","text":"<p>Removes the key metadata listeners.</p>"},{"location":"RDKShell/#events_51","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_47","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_51","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_51","title":"Example","text":""},{"location":"RDKShell/#request_51","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.removeKeyMetadataListener\",\n    \"params\": {\n        \"client\": \"searchanddiscovery\",\n        \"callsign\": \"searchanddiscovery\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_51","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#resetinactivitytime","title":"resetInactivityTime","text":"<p>Resets the inactivity notification interval.</p>"},{"location":"RDKShell/#events_52","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_48","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_52","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_52","title":"Example","text":""},{"location":"RDKShell/#request_52","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.resetInactivityTime\"\n}\n</code></pre>"},{"location":"RDKShell/#response_52","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#resumeapplication","title":"resumeApplication","text":"<p>Resumes an application.</p>"},{"location":"RDKShell/#events_53","title":"Events","text":"Event Description onApplicationResumed Triggers when an application resumes from a suspended state ### Parameters Name Type Description params object params.client string The client name"},{"location":"RDKShell/#result_53","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_53","title":"Example","text":""},{"location":"RDKShell/#request_53","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.resumeApplication\",\n    \"params\": {\n        \"client\": \"HtmlApp\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_53","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#scaletofit","title":"scaleToFit","text":"<p>Scales the specified client to fit the current bounds.</p>"},{"location":"RDKShell/#events_54","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_49","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.x number The x location params.y number The y location params.w number The width params.h number The height"},{"location":"RDKShell/#result_54","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_54","title":"Example","text":""},{"location":"RDKShell/#request_54","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.scaleToFit\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"x\": 0,\n        \"y\": 0,\n        \"w\": 1920,\n        \"h\": 1080\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_54","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setbounds","title":"setBounds","text":"<p>Sets the bounds of the specified client.</p>"},{"location":"RDKShell/#events_55","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_50","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.x number The x location params.y number The y location params.w number The width params.h number The height"},{"location":"RDKShell/#result_55","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_55","title":"Example","text":""},{"location":"RDKShell/#request_55","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setBounds\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"x\": 0,\n        \"y\": 0,\n        \"w\": 1920,\n        \"h\": 1080\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_55","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setcursorsize","title":"setCursorSize","text":"<p>Sets the cursor size.</p>"},{"location":"RDKShell/#events_56","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_51","title":"Parameters","text":"Name Type Description params object params.width number The cursor width params.height number The cursor height"},{"location":"RDKShell/#result_56","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_56","title":"Example","text":""},{"location":"RDKShell/#request_56","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setCursorSize\",\n    \"params\": {\n        \"width\": 255,\n        \"height\": 255\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_56","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setfocus","title":"setFocus","text":"<p>Sets focus to the specified client.</p>"},{"location":"RDKShell/#events_57","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_52","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign"},{"location":"RDKShell/#result_57","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_57","title":"Example","text":""},{"location":"RDKShell/#request_57","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setFocus\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_57","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setholepunch","title":"setHolePunch","text":"<p>Enables or disables video hole punching for the specified client.</p>"},{"location":"RDKShell/#events_58","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_53","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.holePunch boolean Whether hole punching is enabled (<code>true</code>) or disabled (<code>false</code>)"},{"location":"RDKShell/#result_58","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_58","title":"Example","text":""},{"location":"RDKShell/#request_58","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setHolePunch\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"holePunch\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_58","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setinactivityinterval","title":"setInactivityInterval","text":"<p>Sets the inactivity notification interval.</p>"},{"location":"RDKShell/#events_59","title":"Events","text":"Event Description onUserInactivity Triggers only if the device is inactive for the specified time interval ### Parameters Name Type Description params object params.interval integer The inactivity event interval in minutes"},{"location":"RDKShell/#result_59","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_59","title":"Example","text":""},{"location":"RDKShell/#request_59","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setInactivityInterval\",\n    \"params\": {\n        \"interval\": 15\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_59","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setloglevel","title":"setLogLevel","text":"<p>Sets the logging level.</p>"},{"location":"RDKShell/#events_60","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_54","title":"Parameters","text":"Name Type Description params object params.logLevel string The log level (must be one of the following: DEBUG, INFO, WARN, ERROR, FATAL)"},{"location":"RDKShell/#result_60","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_60","title":"Example","text":""},{"location":"RDKShell/#request_60","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setLogLevel\",\n    \"params\": {\n        \"logLevel\": \"INFO\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_60","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setmemorymonitor","title":"setMemoryMonitor","text":"<p>Enables or disables RAM memory monitoring on the device. Upon enabling, triggers possible events are onDeviceLowRamWarning, onDeviceCriticallyLowRamWarning, onDeviceLowRamWarningCleared, and onDeviceCriticallyLowRamWarningCleared.</p>"},{"location":"RDKShell/#events_61","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_55","title":"Parameters","text":"Name Type Description params object params.enable boolean <code>true</code> to enable memory monitoring or <code>false</code> to disable memory monitoring params.interval number The duration, in seconds, between memory checks params.lowRam number The threshold, in Megabytes, after which a <code>onDeviceLowRamWarning</code> event is generated params.criticallyLowRam number The threshold, in Megabytes, after which a critically <code>onDeviceCriticallyLowRamWarning</code> event is generated"},{"location":"RDKShell/#result_61","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_61","title":"Example","text":""},{"location":"RDKShell/#request_61","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setMemoryMonitor\",\n    \"params\": {\n        \"enable\": true,\n        \"interval\": 300,\n        \"lowRam\": 128,\n        \"criticallyLowRam\": 64\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_61","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setopacity","title":"setOpacity","text":"<p>Sets the opacity of the specified client.</p>"},{"location":"RDKShell/#events_62","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_56","title":"Parameters","text":"Name Type Description params object params.client string The client name params.opacity integer The opacity level (between 0 and 100)"},{"location":"RDKShell/#result_62","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_62","title":"Example","text":""},{"location":"RDKShell/#request_62","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setOpacity\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"opacity\": 100\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_62","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setscale","title":"setScale","text":"<p>Scales an application.</p>"},{"location":"RDKShell/#events_63","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_57","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.sx number The x scale factor params.sy number The y scale factor"},{"location":"RDKShell/#result_63","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_63","title":"Example","text":""},{"location":"RDKShell/#request_63","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setScale\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"sx\": 0.5,\n        \"sy\": 0.5\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_63","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setscreenresolution","title":"setScreenResolution","text":"<p>Sets the screen resolution.</p>"},{"location":"RDKShell/#events_64","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_58","title":"Parameters","text":"Name Type Description params object params.w number The width params.h number The height"},{"location":"RDKShell/#result_64","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_64","title":"Example","text":""},{"location":"RDKShell/#request_64","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setScreenResolution\",\n    \"params\": {\n        \"w\": 1920,\n        \"h\": 1080\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_64","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#settopmost","title":"setTopmost","text":"<p>Sets whether the specified client appears above all other clients on the display.</p>"},{"location":"RDKShell/#events_65","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_59","title":"Parameters","text":"Name Type Description params object params.client string The client name params.topmost boolean <code>true</code> to set the client as the top most client params?.focus boolean <sup>(optional)</sup> `true' to set focus for the client"},{"location":"RDKShell/#result_65","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_65","title":"Example","text":""},{"location":"RDKShell/#request_65","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setTopmost\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"topmost\": true,\n        \"focus\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_65","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setvirtualresolution","title":"setVirtualResolution","text":"<p>Sets the virtual resolution for the specified client.</p>"},{"location":"RDKShell/#events_66","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_60","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.width number <sup>(optional)</sup> The width of the virtual resolution params?.height number <sup>(optional)</sup> The height of the virtual resolution"},{"location":"RDKShell/#result_66","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_66","title":"Example","text":""},{"location":"RDKShell/#request_66","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setVirtualResolution\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"width\": 1920,\n        \"height\": 1080\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_66","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setvisibility","title":"setVisibility","text":"<p>Sets whether the specified client should be visible.</p>"},{"location":"RDKShell/#events_67","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_61","title":"Parameters","text":"Name Type Description params object params.client string The client name params?.callsign string <sup>(optional)</sup> The application callsign params.visible boolean Whether the client is visible (<code>true</code>) or not (<code>false</code>)"},{"location":"RDKShell/#result_67","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_67","title":"Example","text":""},{"location":"RDKShell/#request_67","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setVisibility\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"callsign\": \"org.rdk.Netflix\",\n        \"visible\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_67","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setgraphicsframerate","title":"setGraphicsFrameRate","text":"<p>Set Graphics Frame Rate.</p>"},{"location":"RDKShell/#events_68","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_62","title":"Parameters","text":"Name Type Description params object params.framerate number Graphics Framerate to be set"},{"location":"RDKShell/#result_68","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_68","title":"Example","text":""},{"location":"RDKShell/#request_68","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setGraphicsFrameRate\",\n    \"params\": {\n        \"framerate\": 60\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_68","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#showcursor","title":"showCursor","text":"<p>Shows the cursor on the display using the current cursor size. See <code>setCursorSize</code>. The cursor automatically disappears after 5 seconds of inactivity.</p>"},{"location":"RDKShell/#events_69","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_63","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_69","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_69","title":"Example","text":""},{"location":"RDKShell/#request_69","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.showCursor\"\n}\n</code></pre>"},{"location":"RDKShell/#response_69","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#showfullscreenimage","title":"showFullScreenImage","text":"<p>Shows the Full Screen Image.</p>"},{"location":"RDKShell/#events_70","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_64","title":"Parameters","text":"Name Type Description params object params.path string The image path"},{"location":"RDKShell/#result_70","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_70","title":"Example","text":""},{"location":"RDKShell/#request_70","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.showFullScreenImage\",\n    \"params\": {\n        \"path\": \"/tmp/netflix.png\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_70","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#showsplashlogo","title":"showSplashLogo","text":"<p>Displays the splash screen.</p>"},{"location":"RDKShell/#events_71","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_65","title":"Parameters","text":"Name Type Description params object params.displayTime number The amount of the time to show the splash screen"},{"location":"RDKShell/#result_71","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_71","title":"Example","text":""},{"location":"RDKShell/#request_71","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.showSplashLogo\",\n    \"params\": {\n        \"displayTime\": 5\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_71","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#showwatermark","title":"showWatermark","text":"<p>Sets whether a watermark shows on the display.</p>"},{"location":"RDKShell/#events_72","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_66","title":"Parameters","text":"Name Type Description params object params.show boolean <code>true</code> to show the watermark or <code>false</code> to hide the watermark"},{"location":"RDKShell/#result_72","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_72","title":"Example","text":""},{"location":"RDKShell/#request_72","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.showWatermark\",\n    \"params\": {\n        \"show\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_72","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#suspend","title":"suspend","text":"<p>Suspends an application.</p>"},{"location":"RDKShell/#events_73","title":"Events","text":"Event Description onSuspended Triggers when the runtime of an application is suspended ### Parameters Name Type Description params object params.callsign string The application callsign"},{"location":"RDKShell/#result_73","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_73","title":"Example","text":""},{"location":"RDKShell/#request_73","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.suspend\",\n    \"params\": {\n        \"callsign\": \"Cobalt\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_73","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#suspendapplication","title":"suspendApplication","text":"<p>Suspends an application.</p>"},{"location":"RDKShell/#events_74","title":"Events","text":"Event Description onApplicationSuspended Triggers when an application is suspended ### Parameters Name Type Description params object params.client string The client name"},{"location":"RDKShell/#result_74","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_74","title":"Example","text":""},{"location":"RDKShell/#request_74","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.suspendApplication\",\n    \"params\": {\n        \"client\": \"HtmlApp\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_74","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#keyrepeatconfig","title":"keyRepeatConfig","text":"<p>Customizes key repeats.</p>"},{"location":"RDKShell/#events_75","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_67","title":"Parameters","text":"Name Type Description params object params?.input string <sup>(optional)</sup> input type, can be 'default' or 'keyboard'. If 'input' prop not specified 'default'('keyboard') is assumed params.enabled boolean <code>true</code> to enable key repeats, false to disable key repeats params.initialDelay number number of miliseconds until first key repeat event will be sent params.repeatInterval number number of miliseconds until following key repeat events will be sent"},{"location":"RDKShell/#result_75","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_75","title":"Example","text":""},{"location":"RDKShell/#request_75","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.keyRepeatConfig\",\n    \"params\": {\n        \"input\": \"default\",\n        \"enabled\": true,\n        \"initialDelay\": 500,\n        \"repeatInterval\": 250\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_75","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#setavblocked","title":"setAVBlocked","text":"<p>adds/removes the list of applications with the given callsigns to/from the blacklist.</p>"},{"location":"RDKShell/#events_76","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_68","title":"Parameters","text":"Name Type Description params object params.callsign string The application callsign params.blocked boolean Whether to block (<code>true</code>) or unblock (<code>false</code>) AV for the callsign"},{"location":"RDKShell/#result_76","title":"Result","text":"Name Type Description result object result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_76","title":"Example","text":""},{"location":"RDKShell/#request_76","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.setAVBlocked\",\n    \"params\": {\n        \"callsign\": \"searchanddiscovery\",\n        \"blocked\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#response_76","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#getblockedavapplications","title":"getBlockedAVApplications","text":"<p>Gets a list of blacklisted clients.</p>"},{"location":"RDKShell/#events_77","title":"Events","text":"<p>No Events</p>"},{"location":"RDKShell/#parameters_69","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"RDKShell/#result_77","title":"Result","text":"Name Type Description result object result.clients array A list of clients result.clients[#] string result.success boolean Whether the request succeeded"},{"location":"RDKShell/#example_77","title":"Example","text":""},{"location":"RDKShell/#request_77","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.RDKShell.getBlockedAVApplications\"\n}\n</code></pre>"},{"location":"RDKShell/#response_77","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": {\n        \"clients\": [\n            \"org.rdk.Netflix\"\n        ],\n        \"success\": true\n    }\n}\n</code></pre>"},{"location":"RDKShell/#notifications","title":"Notifications","text":"<p>Notifications are autonomous events, triggered by the internals of the implementation, and broadcasted via JSON-RPC to all registered observers. Refer to [Thunder] for information on how to register for a notification.</p> <p>The following events are provided by the org.rdk.RDKShell plugin:</p> <p>RDKShell interface events:</p> Event Description onApplicationActivated Triggered when an application is activated onApplicationConnected Triggered when a connection to an application succeeds onApplicationDisconnected Triggered when an attempt to disconnect from an application succeeds onApplicationFirstFrame Triggered when the first frame of an application is loaded onApplicationLaunched Triggered when an application launches successfully onApplicationResumed Triggered when an application resumes from a suspended state onApplicationSuspended Triggered when an application is suspended onApplicationTerminated Triggered when an application terminates onDestroyed Triggered when a runtime is destroyed onDeviceCriticallyLowRamWarning Triggered when the RAM memory on the device exceeds the configured <code>criticallyLowRam</code> threshold value onDeviceCriticallyLowRamWarningCleared Triggered when the RAM memory on the device no longer exceeds the configured <code>criticallyLowRam</code> threshold value onDeviceLowRamWarning Triggered when the RAM memory on the device exceeds the configured <code>lowRam</code> threshold value onDeviceLowRamWarningCleared Triggered when the RAM memory on the device no longer exceeds the configured <code>lowRam</code> threshold value onLaunched Triggered when a runtime is launched onSuspended Triggered when a runtime is suspended onUserInactivity Triggered when a device has been inactive for a period of time onWillDestroy Triggered when an application is set to be destroyed onPluginSuspended Triggered when a plugin is suspended onScreenshotComplete Triggered when a screenshot is captured successfully using <code>getScreenshot</code> method onBlur Triggered when the focused client is blurred onFocus Triggered when a client is set to focus <p></p>"},{"location":"RDKShell/#onapplicationactivated","title":"onApplicationActivated","text":"<p>The onApplicationActivated event is triggered when an application becomes active or is brought to the foreground. This event is particularly useful for scenarios where you need to perform specific actions or updates when the application gains focus, such as refreshing data, resuming paused processes, or updating the user interface to reflect the current state. It ensures that the application is ready to interact with the user and provides a seamless experience by handling tasks that are relevant only when the application is actively being used. This event is essential for maintaining application responsiveness and ensuring that the user receives the most up-to-date information or functionality when they return to the app.</p>"},{"location":"RDKShell/#related-functions_12","title":"Related Functions","text":"<p>addAnimation : This function can trigger onApplicationActivated when animations are added to the application, ensuring they are properly initialized or resumed when the app becomes active.  </p> <p>addKeyIntercept : This function may invoke onApplicationActivated when key intercepts are set up, allowing the application to handle specific key inputs upon activation.  </p> <p>addKeyIntercepts : Similar to addKeyIntercept, this function can trigger onApplicationActivated when multiple key intercepts are configured, ensuring the app is ready to process these inputs when active.  </p> <p>addKeyListener : This function can trigger onApplicationActivated by setting up key listeners that become active when the application is brought to the foreground.  </p> <p>addKeyMetadataListener : This function may invoke onApplicationActivated when metadata listeners for keys are added, ensuring the app processes relevant metadata upon activation.  </p> <p>createDisplay : This function can trigger onApplicationActivated when a new display is created, ensuring the display is properly initialized and ready for interaction when the app becomes active.  </p> <p>destroy : While primarily used for cleanup, this function can indirectly trigger onApplicationActivated when the application transitions between states, ensuring proper handling of resources.  </p> <p>enableInactivityReporting : This function may invoke onApplicationActivated to resume inactivity reporting when the application becomes active, ensuring accurate tracking of user engagement.  </p> <p>enableKeyRepeats : This function can trigger onApplicationActivated by enabling key repeat functionality, ensuring the app handles repeated key inputs correctly upon activation.  </p> <p>enableLogsFlushing : This function may invoke onApplicationActivated to resume log flushing processes, ensuring that logs are updated and maintained when the app is active.  </p> <p>enableVirtualDisplay : This function can trigger onApplicationActivated when virtual displays are enabled, ensuring they are properly initialized and ready for use upon activation.  </p> <p>generateKey : This function may invoke onApplicationActivated when keys are generated, ensuring the application processes these keys correctly when it becomes active.</p>"},{"location":"RDKShell/#parameters_70","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_78","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationActivated\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationconnected","title":"onApplicationConnected","text":"<p>The <code>onApplicationConnected</code> event is triggered when the application successfully establishes a connection with the underlying system or platform. This event signifies that the application is now ready to interact with the system's features and services. For users, this means that the application has completed its initialization process and is fully operational. This event is particularly useful in scenarios where the application needs to notify users or perform specific actions upon successfully connecting to the system, such as updating the user interface, enabling certain features, or starting background processes.</p>"},{"location":"RDKShell/#related-functions_13","title":"Related Functions","text":"<p>createDisplay : The <code>createDisplay</code> function is responsible for initializing and setting up a display for the application. This function triggers the <code>onApplicationConnected</code> event once the display is successfully created, signaling that the application is ready to interact with the display and other system components.</p>"},{"location":"RDKShell/#parameters_71","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_79","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationConnected\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationdisconnected","title":"onApplicationDisconnected","text":"<p>The <code>onApplicationDisconnected</code> event is triggered when an application loses its connection to the system or platform it is interacting with. This event is particularly useful for monitoring the application's lifecycle and ensuring that appropriate actions are taken when the connection is disrupted. For example, it can be used to clean up resources, notify users, or attempt reconnection. This event is essential for maintaining a seamless user experience and ensuring that the application handles disconnections gracefully.</p>"},{"location":"RDKShell/#related-functions_14","title":"Related Functions","text":"<p>destroy : The <code>destroy</code> function is responsible for terminating or cleaning up resources associated with an application or display. When this function is called, it can trigger the <code>onApplicationDisconnected</code> event to indicate that the application has been disconnected as part of the destruction process.</p>"},{"location":"RDKShell/#parameters_72","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_80","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationDisconnected\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationfirstframe","title":"onApplicationFirstFrame","text":"<p>Triggered when the first frame of an application is loaded.</p>"},{"location":"RDKShell/#parameters_73","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_81","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationFirstFrame\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationlaunched","title":"onApplicationLaunched","text":"<p>Triggered when an application launches successfully.</p>"},{"location":"RDKShell/#parameters_74","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_82","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationLaunched\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationresumed","title":"onApplicationResumed","text":"<p>Triggered when an application resumes from a suspended state.</p>"},{"location":"RDKShell/#parameters_75","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_83","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationResumed\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationsuspended","title":"onApplicationSuspended","text":"<p>Triggered when an application is suspended.</p>"},{"location":"RDKShell/#parameters_76","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_84","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationSuspended\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onapplicationterminated","title":"onApplicationTerminated","text":"<p>Triggered when an application terminates.</p>"},{"location":"RDKShell/#parameters_77","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_85","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onApplicationTerminated\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#ondestroyed","title":"onDestroyed","text":"<p>Triggered when a runtime is destroyed.</p>"},{"location":"RDKShell/#parameters_78","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_86","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onDestroyed\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#ondevicecriticallylowramwarning","title":"onDeviceCriticallyLowRamWarning","text":"<p>Triggered when the RAM memory on the device exceeds the configured <code>criticallyLowRam</code> threshold value. See <code>setMemoryMonitor</code>.</p>"},{"location":"RDKShell/#parameters_79","title":"Parameters","text":"Name Type Description params object params.ram integer The amount of free memory remaining in Kilobytes"},{"location":"RDKShell/#example_87","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onDeviceCriticallyLowRamWarning\",\n    \"params\": {\n        \"ram\": 65536\n    }\n}\n</code></pre>"},{"location":"RDKShell/#ondevicecriticallylowramwarningcleared","title":"onDeviceCriticallyLowRamWarningCleared","text":"<p>Triggered when the RAM memory on the device no longer exceeds the configured <code>criticallyLowRam</code> threshold value. See <code>setMemoryMonitor</code>.</p>"},{"location":"RDKShell/#parameters_80","title":"Parameters","text":"Name Type Description params object params.ram integer The amount of free memory remaining in Kilobytes"},{"location":"RDKShell/#example_88","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onDeviceCriticallyLowRamWarningCleared\",\n    \"params\": {\n        \"ram\": 65536\n    }\n}\n</code></pre>"},{"location":"RDKShell/#ondevicelowramwarning","title":"onDeviceLowRamWarning","text":"<p>Triggered when the RAM memory on the device exceeds the configured <code>lowRam</code> threshold value. See <code>setMemoryMonitor</code>.</p>"},{"location":"RDKShell/#parameters_81","title":"Parameters","text":"Name Type Description params object params.ram integer The amount of free memory remaining in Kilobytes"},{"location":"RDKShell/#example_89","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onDeviceLowRamWarning\",\n    \"params\": {\n        \"ram\": 65536\n    }\n}\n</code></pre>"},{"location":"RDKShell/#ondevicelowramwarningcleared","title":"onDeviceLowRamWarningCleared","text":"<p>Triggered when the RAM memory on the device no longer exceeds the configured <code>lowRam</code> threshold value. See <code>setMemoryMonitor</code>.</p>"},{"location":"RDKShell/#parameters_82","title":"Parameters","text":"Name Type Description params object params.ram integer The amount of free memory remaining in Kilobytes"},{"location":"RDKShell/#example_90","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onDeviceLowRamWarningCleared\",\n    \"params\": {\n        \"ram\": 65536\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onlaunched","title":"onLaunched","text":"<p>Triggered when a runtime is launched.</p>"},{"location":"RDKShell/#parameters_83","title":"Parameters","text":"Name Type Description params object params.client string The client name params.launchType string The launch type of an application (must be one of the following: create, active, suspend, resume)"},{"location":"RDKShell/#example_91","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onLaunched\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\",\n        \"launchType\": \"create\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onsuspended","title":"onSuspended","text":"<p>Triggered when a runtime is suspended.</p>"},{"location":"RDKShell/#parameters_84","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_92","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onSuspended\",\n    \"params\": {\n        \"client\": \"org.rdk.Netflix\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onuserinactivity","title":"onUserInactivity","text":"<p>Triggered when a device has been inactive for a period of time. This event is broadcasted at the frequency specified by <code>setInactivityInterval</code> if the device is not active. The default frequency is 15 minutes.</p>"},{"location":"RDKShell/#parameters_85","title":"Parameters","text":"Name Type Description params object params.minutes number The number of minutes that the device has been inactive"},{"location":"RDKShell/#example_93","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onUserInactivity\",\n    \"params\": {\n        \"minutes\": 5\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onwilldestroy","title":"onWillDestroy","text":"<p>Triggered when an application is set to be destroyed.</p>"},{"location":"RDKShell/#parameters_86","title":"Parameters","text":"Name Type Description params object params.callsign string The application callsign"},{"location":"RDKShell/#example_94","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onWillDestroy\",\n    \"params\": {\n        \"callsign\": \"Cobalt\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onpluginsuspended","title":"onPluginSuspended","text":"<p>Triggered when a plugin is suspended.</p>"},{"location":"RDKShell/#parameters_87","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_95","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPluginSuspended\",\n    \"params\": {\n        \"client\": \"searchanddiscovery\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onscreenshotcomplete","title":"onScreenshotComplete","text":"<p>Triggered when a screenshot is captured successfully using <code>getScreenshot</code> </p>"},{"location":"RDKShell/#parameters_88","title":"Parameters","text":"Name Type Description params object params.imageData string Base64 encoded image data"},{"location":"RDKShell/#example_96","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onScreenshotComplete\",\n    \"params\": {\n        \"imageData\": \"AAAAAAAAAA\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onblur","title":"onBlur","text":"<p>Triggered when the focused client is blurred.</p>"},{"location":"RDKShell/#parameters_89","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_97","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onBlur\",\n    \"params\": {\n        \"client\": \"searchanddiscovery\"\n    }\n}\n</code></pre>"},{"location":"RDKShell/#onfocus","title":"onFocus","text":"<p>Triggered when a client is set to focus.</p>"},{"location":"RDKShell/#parameters_90","title":"Parameters","text":"Name Type Description params object params.client string The client name"},{"location":"RDKShell/#example_98","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onFocus\",\n    \"params\": {\n        \"client\": \"HtmlApp\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/","title":"UserSettings","text":""},{"location":"UserSettings/#usersettings-plugin","title":"UserSettings Plugin","text":"<p>Version: 1.0.0</p> <p>A org.rdk.UserSettings plugin for Thunder framework.</p>"},{"location":"UserSettings/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Abbreviation, Acronyms and Terms</li> <li>Description</li> <li>Configuration</li> <li>Methods</li> <li>Notifications</li> </ul>"},{"location":"UserSettings/#abbreviation-acronyms-and-terms","title":"Abbreviation, Acronyms and Terms","text":"<p>[Refer to this link]</p> <p></p>"},{"location":"UserSettings/#description","title":"Description","text":"<p>The UserSettings RDK service is a WPEFramework plugin designed to manage and configure user-specific settings for audio, captions, and language preferences. It provides interfaces for accessing and modifying settings such as preferred audio languages, audio descriptions, captions, and presentation languages. This service ensures a customizable and accessible user experience by allowing dynamic configuration of these preferences.</p> <p>The plugin is designed to be loaded and executed within the Thunder framework. For more information about the framework refer to [Thunder].</p> <p></p>"},{"location":"UserSettings/#configuration","title":"Configuration","text":"<p>The table below lists configuration options of the plugin.</p> Name Type Description callsign string Plugin instance name (default: org.rdk.UserSettings) classname string Class name: org.rdk.UserSettings locator string Library name: libWPEFrameworkUserSettings.so autostart boolean Determines if the plugin shall be started automatically along with the framework <p></p>"},{"location":"UserSettings/#methods","title":"Methods","text":"<p>The following methods are provided by the org.rdk.UserSettings plugin:</p> <p>org.rdk.UserSettings interface methods:</p> Method Description Event setAudioDescription set audio description onAudioDescriptionChanged setPreferredAudioLanguages Set preferred audio languages onPreferredAudioLanguagesChanged setPresentationLanguage Sets presentation language onPresentationLanguageChanged setCaptions manage captions settings onCaptionsChanged setPreferredCaptionsLanguages Set preferred captions languages onPreferredCaptionsLanguagesChanged setPreferredClosedCaptionService Set preferred caption service onPreferredClosedCaptionServiceChanged setPrivacyMode Set privacy mode onPrivacyModeChanged setPinControl set pin control onPinControlChanged setViewingRestrictions Set viewing restrictions onViewingRestrictionsChanged setViewingRestrictionsWindow set viewing restrictions onViewingRestrictionsWindowChanged setLiveWatershed set live watershed onLiveWatershedChanged setPlaybackWatershed set playback watershed onPlaybackWatershedChanged setBlockNotRatedContent Block unrated content onBlockNotRatedContentChanged setPinOnPurchase set pin on purchase onPinOnPurchaseChanged setHighContrast Enables high contrast onHighContrastChanged setVoiceGuidance configure voice guidance onVoiceGuidanceChanged setVoiceGuidanceRate Sets voice guidance rate onVoiceGuidanceRateChanged setVoiceGuidanceHints set voice guidance hints onVoiceGuidanceHintsChanged setContentPin set content pin onContentPinChanged getAudioDescription audio description retrieval NA getPreferredAudioLanguages preferred audio languages NA getPresentationLanguage presentation language retrieval NA getCaptions fetch video captions NA getPreferredCaptionsLanguages preferred captions languages NA getPreferredClosedCaptionService Get preferred closed captions NA getPrivacyMode get privacy mode info NA getPinControl Pin control management NA getViewingRestrictions viewing restrictions info NA getViewingRestrictionsWindow viewing restrictions window NA getLiveWatershed live watershed data NA getPlaybackWatershed playback watershed details NA getBlockNotRatedContent Get unrated content NA getPinOnPurchase Get PIN on purchase NA getHighContrast get high contrast NA getVoiceGuidance voice guidance details NA getVoiceGuidanceRate Get voice guidance rate NA getVoiceGuidanceHints Get voice guidance hints NA getMigrationState migration state retrieval NA getMigrationStates migration states info NA getContentPin get content pin details NA <p></p>"},{"location":"UserSettings/#setaudiodescription","title":"setAudioDescription","text":"<p>The <code>setAudioDescription</code> API allows users to enable or disable the audio description feature for their media content. Audio description is an accessibility feature that provides additional audio narration to describe visual elements in a video, such as actions, settings, or scene changes, making the content more accessible to visually impaired users. By using this API, users can customize their viewing experience to include or exclude this feature based on their preferences. Once enabled, the system will provide descriptive audio tracks where available.</p>"},{"location":"UserSettings/#related-functions","title":"Related Functions","text":"<p>getAudioDescription : Retrieves the current status of the audio description feature (enabled or disabled). This function complements <code>setAudioDescription</code> by allowing users to verify the current setting.</p>"},{"location":"UserSettings/#events","title":"Events","text":"Event Description onAudioDescriptionChanged Triggered when the audio description changes."},{"location":"UserSettings/#parameters","title":"Parameters","text":"Name Type Description params object params.enabled boolean Audio Description Enabled: true/false"},{"location":"UserSettings/#result","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example","title":"Example","text":""},{"location":"UserSettings/#request","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setAudioDescription\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setAudioDescription\", \n\"params\":{\"enabled\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setAudioDescription(params) {\n  thunderJS.setAudioDescription(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setAudioDescription({enabled: true})\"&gt;setAudioDescription&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setAudioDescription(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enabled\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setpreferredaudiolanguages","title":"setPreferredAudioLanguages","text":"<p>The <code>setPreferredAudioLanguages</code> API allows users to specify their preferred audio languages for content playback. This setting ensures that the audio track in the selected language is prioritized whenever available, enhancing the viewing experience by aligning it with the user's language preferences. For example, if a user prefers \"English\" and \"Spanish,\" the system will attempt to play content in these languages in the specified order of preference. This feature is particularly useful in multilingual households or for users who consume content in multiple languages.</p>"},{"location":"UserSettings/#related-functions_1","title":"Related Functions","text":"<p>getPreferredAudioLanguages : Retrieves the currently set preferred audio languages, allowing users to verify or review their preferences.</p>"},{"location":"UserSettings/#events_1","title":"Events","text":"Event Description onPreferredAudioLanguagesChanged Triggered when the audio preferred Audio languages changes."},{"location":"UserSettings/#parameters_1","title":"Parameters","text":"Name Type Description params object params.preferredLanguages string A prioritized list of ISO 639-2/B codes for the preferred audio languages"},{"location":"UserSettings/#result_1","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_1","title":"Example","text":""},{"location":"UserSettings/#request_1","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPreferredAudioLanguages\",\n    \"params\": {\n        \"preferredLanguages\": \"eng\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_1","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPreferredAudioLanguages\", \n\"params\":{\"preferredLanguages\":\"eng\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPreferredAudioLanguages(preferredLanguages) {\n  thunderJS.setPreferredAudioLanguages(preferredLanguages)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPreferredAudioLanguages('eng')\"&gt;setPreferredAudioLanguages&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setPreferredAudioLanguages(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"preferredLanguages\"] = \"eng\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setpresentationlanguage","title":"setPresentationLanguage","text":"<p>The <code>setPresentationLanguage</code> API allows users to define their preferred language for the presentation of content, such as menus, on-screen text, and other user interface elements. By setting the presentation language, users can customize their viewing experience to align with their language preferences, ensuring that the interface is accessible and easy to navigate. This setting is particularly useful in multilingual households or for users who prefer a specific language for better comprehension and usability. Once the presentation language is set, the system updates the user interface accordingly.</p>"},{"location":"UserSettings/#related-functions_2","title":"Related Functions","text":"<p>getPresentationLanguage : Retrieves the currently set presentation language, allowing users to confirm or review their existing language preference.</p>"},{"location":"UserSettings/#events_2","title":"Events","text":"Event Description onPresentationLanguageChanged Triggered when the presentation Language changes."},{"location":"UserSettings/#parameters_2","title":"Parameters","text":"Name Type Description params object params.presentationLanguage string The preferred presentationLanguage in a full BCP 47 value, including script, * region, variant The language set and used by Immerse UI"},{"location":"UserSettings/#result_2","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_2","title":"Example","text":""},{"location":"UserSettings/#request_2","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPresentationLanguage\",\n    \"params\": {\n        \"presentationLanguage\": \"en-US\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_2","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPresentationLanguage\", \n\"params\":{\"presentationLanguage\":\"en-US\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setLanguage(presentationLanguage) {\n  thunderJS.org.rdk.UserSettings.setPresentationLanguage({ presentationLanguage: presentationLanguage })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setLanguage('en-US')\"&gt;setLanguage&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setPresentationLanguage(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"presentationLanguage\"] = \"en-US\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setcaptions","title":"setCaptions","text":"<p>The <code>setCaptions</code> function allows users to enable or disable captions for their viewing experience. Captions are textual representations of the audio content in a video, including dialogue, sound effects, and other audio cues. This feature is particularly useful for individuals who are deaf or hard of hearing, or for those who prefer to watch content with captions for better comprehension. By enabling captions, users can ensure that they do not miss any important audio information, even in noisy environments or when the audio is muted. Conversely, disabling captions provides a cleaner viewing experience for those who do not require them.</p> <p>This function is part of the user settings and ensures that the preference for captions is saved and applied consistently across the platform. Once set, the system may notify relevant components or services about the change, ensuring a seamless experience for the user.</p>"},{"location":"UserSettings/#related-functions_3","title":"Related Functions","text":"<p>getCaptions : Retrieves the current status of captions (enabled or disabled), allowing users to check their existing preference.</p>"},{"location":"UserSettings/#events_3","title":"Events","text":"Event Description onCaptionsChanged Triggered when the captions changes."},{"location":"UserSettings/#parameters_3","title":"Parameters","text":"Name Type Description params object params.enabled boolean Captions Enabled: true/false"},{"location":"UserSettings/#result_3","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_3","title":"Example","text":""},{"location":"UserSettings/#request_3","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setCaptions\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_3","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setCaptions\", \n\"params\":{\"enabled\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setCaptions(params) {\n  thunderJS.setCaptions(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setCaptions({enabled: true})\"&gt;setCaptions&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setCaptions(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enabled\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setpreferredcaptionslanguages","title":"setPreferredCaptionsLanguages","text":"<p>The <code>setPreferredCaptionsLanguages</code> function allows users to specify their preferred languages for captions. This feature is particularly useful for individuals who rely on captions to enhance their viewing experience, such as those who are hard of hearing or watching content in a non-native language. By setting a preferred language, users can ensure that captions are displayed in their desired language whenever available, providing a more personalized and accessible viewing experience. This setting is typically applied across supported content and platforms, making it a convenient way to maintain consistent preferences.</p>"},{"location":"UserSettings/#related-functions_4","title":"Related Functions","text":"<p>getPreferredCaptionsLanguages : Retrieves the currently set preferred captions languages, allowing users to verify or review their existing preferences.</p>"},{"location":"UserSettings/#events_4","title":"Events","text":"Event Description onPreferredCaptionsLanguagesChanged Triggered when the PreferredCaption Languages changes."},{"location":"UserSettings/#parameters_4","title":"Parameters","text":"Name Type Description params object params.preferredLanguages string A prioritized list of ISO 639-2/B codes for the preferred captions languages"},{"location":"UserSettings/#result_4","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_4","title":"Example","text":""},{"location":"UserSettings/#request_4","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPreferredCaptionsLanguages\",\n    \"params\": {\n        \"preferredLanguages\": \"eng\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_4","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPreferredCaptionsLanguages\", \n\"params\":{\"preferredLanguages\":\"eng\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPreferredCaptionsLanguages(preferredLanguages) {\n  thunderJS.setPreferredCaptionsLanguages({ preferredLanguages: preferredLanguages })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPreferredCaptionsLanguages('eng')\"&gt;setPreferredCaptionsLanguages&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void setPreferredCaptionsLanguages(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"preferredLanguages\"] = \"eng\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setpreferredclosedcaptionservice","title":"setPreferredClosedCaptionService","text":"<p>The <code>setPreferredClosedCaptionService</code> API allows users to specify their preferred closed captioning service for video content. Closed captions provide textual representation of audio elements in a video, such as dialogue, sound effects, and other auditory information, making content accessible to individuals with hearing impairments or those who prefer textual aids. By setting a preferred closed caption service, users can ensure that their chosen service is consistently applied across supported content, enhancing their viewing experience. This API is particularly useful for customizing accessibility settings to align with individual preferences.</p>"},{"location":"UserSettings/#related-functions_5","title":"Related Functions","text":"<p>getPreferredClosedCaptionService : Retrieves the currently set preferred closed captioning service, allowing users to confirm or review their selection.</p>"},{"location":"UserSettings/#events_5","title":"Events","text":"Event Description onPreferredClosedCaptionServiceChanged Triggered when the Preferred Closed Caption changes."},{"location":"UserSettings/#parameters_5","title":"Parameters","text":"Name Type Description params object params.service string A string for the preferred closed captions service.  Valid values are AUTO, CC[1-4], TEXT[1-4], SERVICE[1-64] where CC and TEXT is CTA-608 and SERVICE is CTA-708.  AUTO indicates that the choice is left to the player"},{"location":"UserSettings/#result_5","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_5","title":"Example","text":""},{"location":"UserSettings/#request_5","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPreferredClosedCaptionService\",\n    \"params\": {\n        \"service\": \"CC3\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_5","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPreferredClosedCaptionService\", \n\"params\":{\"service\":\"CC3\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPreferredClosedCaptionService(service) {\n  thunderJS.setPreferredClosedCaptionService({ service: service })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPreferredClosedCaptionService('CC3')\"&gt;setPreferredClosedCaptionService&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setPreferredClosedCaptionService(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"service\"] = \"CC3\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setprivacymode","title":"setPrivacyMode","text":"<p>The <code>setPrivacyMode</code> API allows users to configure the privacy settings of their device. This function enables users to choose between two modes: \"SHARE\" and \"DO_NOT_SHARE.\" When set to \"SHARE,\" the device permits sharing of certain user data, which may be used for personalization or other purposes. Conversely, \"DO_NOT_SHARE\" ensures that user data is not shared, prioritizing privacy. This setting is particularly useful for users who are concerned about data security and wish to control how their information is handled. The API validates the input to ensure only the supported values (\"SHARE\" or \"DO_NOT_SHARE\") are accepted, providing a safeguard against incorrect configurations.  </p>"},{"location":"UserSettings/#related-functions_6","title":"Related Functions","text":"<p>getPrivacyMode : Retrieves the current privacy mode setting of the device, allowing users to check whether their device is configured to \"SHARE\" or \"DO_NOT_SHARE.\"</p>"},{"location":"UserSettings/#events_6","title":"Events","text":"Event Description onPrivacyModeChanged Triggered when the Privacy Mode changes."},{"location":"UserSettings/#parameters_6","title":"Parameters","text":"Name Type Description params object params.privacyMode string The Privacy Mode. Valid values are SHARE, DO_NOT_SHARE"},{"location":"UserSettings/#result_6","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_6","title":"Example","text":""},{"location":"UserSettings/#request_6","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPrivacyMode\",\n    \"params\": {\n        \"privacyMode\": \"SHARE\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_6","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPrivacyMode\", \n\"params\":{\"privacyMode\":\"SHARE\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPrivacyMode(params) {\n  thunderJS.setPrivacyMode(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPrivacyMode({ privacyMode: 'SHARE' })\"&gt;setPrivacyMode&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setPrivacyMode(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"privacyMode\"] = \"SHARE\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setpincontrol","title":"setPinControl","text":"<p>The <code>setPinControl</code> API allows users to enable or disable the PIN control feature on their device. PIN control is a security feature that restricts access to certain functionalities or content based on user-defined settings. By enabling PIN control, users can ensure that sensitive actions, such as accessing restricted content or making purchases, require a PIN for authorization. This feature is particularly useful for parental controls or safeguarding against unauthorized access.</p>"},{"location":"UserSettings/#related-functions_7","title":"Related Functions","text":"<p>getPinControl : Retrieves the current status of the PIN control feature, indicating whether it is enabled or disabled.</p>"},{"location":"UserSettings/#events_7","title":"Events","text":"Event Description onPinControlChanged Triggered when the pincontrol changes."},{"location":"UserSettings/#parameters_7","title":"Parameters","text":"Name Type Description params object params.pinControl boolean PinControl Enabled: true/false"},{"location":"UserSettings/#result_7","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_7","title":"Example","text":""},{"location":"UserSettings/#request_7","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPinControl\",\n    \"params\": {\n        \"pinControl\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_7","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPinControl\", \n\"params\":{\"pinControl\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPinControl(pinControl) {\n  thunderJS.setPinControl(pinControl)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPinControl(true)\"&gt;setPinControl&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void org_rdk_UserSettings_setPinControl(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"pinControl\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setviewingrestrictions","title":"setViewingRestrictions","text":"<p>The <code>setViewingRestrictions</code> API allows users to define specific restrictions for content viewing based on their preferences or requirements. This function is particularly useful for managing access to content that may be inappropriate for certain audiences, such as children or individuals with specific sensitivities. By setting viewing restrictions, users can ensure that only content meeting their defined criteria is accessible, providing a tailored and secure viewing experience. This API is often used in conjunction with parental controls or content filtering systems to enforce content guidelines effectively.</p>"},{"location":"UserSettings/#related-functions_8","title":"Related Functions","text":"<p>getViewingRestrictions : Retrieves the current viewing restrictions set by the user. This function complements <code>setViewingRestrictions</code> by allowing users to verify or review the restrictions they have applied.  </p> <p>setViewingRestrictionsWindow : Defines a specific time window during which the viewing restrictions are enforced. This function works alongside <code>setViewingRestrictions</code> to provide more granular control over content accessibility.  </p> <p>getViewingRestrictionsWindow : Retrieves the current time window settings for viewing restrictions, enabling users to review or confirm the enforcement period.</p>"},{"location":"UserSettings/#events_8","title":"Events","text":"Event Description onViewingRestrictionsChanged Triggered when the viewingRestrictions changes."},{"location":"UserSettings/#parameters_8","title":"Parameters","text":"Name Type Description params object params.viewingRestrictions string A project-specific representation of the time interval when viewing"},{"location":"UserSettings/#result_8","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_8","title":"Example","text":""},{"location":"UserSettings/#request_8","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setViewingRestrictions\",\n    \"params\": {\n        \"viewingRestrictions\": \"{\\\"restrictions\\\": [{\\\"scheme\\\": \\\"US_TV\\\", \\\"restrict\\\": [\\\"TV-Y7/FV\\\"]}, {\\\"scheme\\\": \\\"MPAA\\\", \\\"restrict\\\": []}]}\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_8","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setViewingRestrictions\", \n\"params\":{\"viewingRestrictions\":\"{\\\"restrictions\\\": [{\\\"scheme\\\": \\\"US_TV\\\", \\\"restrict\\\": [\\\"TV-Y7/FV\\\"]}, {\\\"scheme\\\": \\\"MPAA\\\", \\\"restrict\\\": []}]}\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setViewingRestrictions(viewingRestrictions) {\n  thunderJS.setViewingRestrictions(viewingRestrictions)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setViewingRestrictions({viewingRestrictions: '{\\\"restrictions\\\": [{\\\"scheme\\\": \\\"US_TV\\\", \\\"restrict\\\": [\\\"TV-Y7/FV\\\"]}, {\\\"scheme\\\": \\\"MPAA\\\", \\\"restrict\\\": []}]}'})\"&gt;setViewingRestrictions&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void org_rdk_UserSettings_setViewingRestrictions(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"viewingRestrictions\"] = \"{\\\"restrictions\\\": [{\\\"scheme\\\": \\\"US_TV\\\", \\\"restrict\\\": [\\\"TV-Y7/FV\\\"]}, {\\\"scheme\\\": \\\"MPAA\\\", \\\"restrict\\\": []}]}\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setviewingrestrictionswindow","title":"setViewingRestrictionsWindow","text":"<p>The <code>setViewingRestrictionsWindow</code> API allows users to define a specific time window during which viewing restrictions are applied. This function is particularly useful for parents or guardians who want to enforce content restrictions during certain hours, such as when children are likely to be watching TV. By setting a viewing restrictions window, users can ensure that inappropriate or restricted content is blocked during the specified timeframe. This feature enhances control over content accessibility and helps maintain a safe viewing environment.</p>"},{"location":"UserSettings/#related-functions_9","title":"Related Functions","text":"<p>getViewingRestrictionsWindow : Retrieves the currently set viewing restrictions window, allowing users to confirm or review the active time window for restrictions. setViewingRestrictions : Sets general viewing restrictions, which can complement the time-based restrictions defined by <code>setViewingRestrictionsWindow</code>. getViewingRestrictions : Retrieves the current viewing restrictions, providing insight into the active content limitations.</p>"},{"location":"UserSettings/#events_9","title":"Events","text":"Event Description onViewingRestrictionsWindowChanged Triggered when the viewingRestrictionsWindow changes."},{"location":"UserSettings/#parameters_9","title":"Parameters","text":"Name Type Description params object params.viewingRestrictionsWindow string A project-specific representation of the time interval"},{"location":"UserSettings/#result_9","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_9","title":"Example","text":""},{"location":"UserSettings/#request_9","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setViewingRestrictionsWindow\",\n    \"params\": {\n        \"viewingRestrictionsWindow\": \"ALWAYS\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_9","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setViewingRestrictionsWindow\", \n\"params\":{\"viewingRestrictionsWindow\":\"{\\\"startTime\\\": \\\"08:00\\\", \\\"endTime\\\": \\\"20:00\\\"}\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setViewingRestrictionsWindow(viewingRestrictionsWindow) {\n  thunderJS.setViewingRestrictionsWindow(viewingRestrictionsWindow)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setViewingRestrictionsWindow({viewingRestrictionsWindow: '{\\\"startTime\\\": \\\"08:00\\\", \\\"endTime\\\": \\\"20:00\\\"}'})\"&gt;setViewingRestrictionsWindow&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setViewingRestrictionsWindow(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"viewingRestrictionsWindow\"] = \"{\\\"startTime\\\": \\\"08:00\\\", \\\"endTime\\\": \\\"20:00\\\"}\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setlivewatershed","title":"setLiveWatershed","text":"<p>The <code>setLiveWatershed</code> API allows users to configure the live watershed setting for their device or application. The live watershed setting is typically used to enforce content restrictions based on time-based guidelines, such as ensuring that certain types of content are only accessible during specific hours. By enabling or disabling this feature, users can control whether live content adheres to watershed rules, which are often designed to protect younger audiences from inappropriate material during certain times of the day. This setting is particularly useful for households with children or for users who want to customize their viewing experience based on content restrictions.</p>"},{"location":"UserSettings/#related-functions_10","title":"Related Functions","text":"<p>getLiveWatershed : Retrieves the current status of the live watershed setting, allowing users to check whether the feature is enabled or disabled.</p>"},{"location":"UserSettings/#events_10","title":"Events","text":"Event Description onLiveWatershedChanged Triggered when the liveWatershed changes."},{"location":"UserSettings/#parameters_10","title":"Parameters","text":"Name Type Description params object params.liveWatershed boolean LiveWatershed Enabled: true/false"},{"location":"UserSettings/#result_10","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_10","title":"Example","text":""},{"location":"UserSettings/#request_10","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setLiveWatershed\",\n    \"params\": {\n        \"liveWatershed\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_10","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setLiveWatershed\", \n\"params\":{\"liveWatershed\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setLiveWatershed(params) {\n  thunderJS.setLiveWatershed(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setLiveWatershed({ liveWatershed: true })\"&gt;setLiveWatershed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setLiveWatershed(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"liveWatershed\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setplaybackwatershed","title":"setPlaybackWatershed","text":"<p>The <code>setPlaybackWatershed</code> API is used to configure the playback watershed setting for a user. The playback watershed is a feature that allows users to set restrictions on the type of content that can be played based on its suitability for certain age groups or time periods. By enabling or disabling this setting, users can control whether content deemed inappropriate for certain audiences is restricted during playback. This is particularly useful for parental controls or adhering to content guidelines.</p> <p>When the playback watershed is enabled, the system ensures that content flagged as unsuitable for the specified criteria is blocked from being played. Conversely, disabling the playback watershed removes these restrictions, allowing all content to be played regardless of its suitability.</p> <p>This API is ideal for users who want to manage content accessibility based on age ratings or other criteria, ensuring a safe and controlled viewing experience.</p>"},{"location":"UserSettings/#related-functions_11","title":"Related Functions","text":"<p>getPlaybackWatershed : Retrieves the current status of the playback watershed setting, allowing users to check whether the restriction is enabled or disabled.</p>"},{"location":"UserSettings/#events_11","title":"Events","text":"Event Description onPlaybackWatershedChanged Triggered when the playbackWatershed changes."},{"location":"UserSettings/#parameters_11","title":"Parameters","text":"Name Type Description params object params.playbackWatershed boolean PlaybackWatershed Enabled: true/false"},{"location":"UserSettings/#result_11","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_11","title":"Example","text":""},{"location":"UserSettings/#request_11","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPlaybackWatershed\",\n    \"params\": {\n        \"playbackWatershed\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_11","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPlaybackWatershed\", \n\"params\":{\"playbackWatershed\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPlaybackWatershed(playbackWatershed) {\n  thunderJS.setPlaybackWatershed({ playbackWatershed: playbackWatershed })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPlaybackWatershed(true)\"&gt;setPlaybackWatershed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setPlaybackWatershed(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"playbackWatershed\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setblocknotratedcontent","title":"setBlockNotRatedContent","text":"<p>The <code>setBlockNotRatedContent</code> API allows users to enable or disable the blocking of content that has not been rated. This feature is particularly useful for parents or guardians who want to ensure that unrated content is restricted from being accessed, providing an additional layer of control over the type of media that can be viewed. By setting this option, users can enforce viewing restrictions based on content ratings, ensuring that unrated material is treated as restricted.</p> <p>This API is part of user settings and is typically used in scenarios where content control and parental guidance are required. When enabled, unrated content will be blocked, and when disabled, unrated content will be accessible. The API modifies the user settings to reflect the desired behavior.</p>"},{"location":"UserSettings/#related-functions_12","title":"Related Functions","text":"<p>getBlockNotRatedContent : Retrieves the current status of the block-not-rated-content setting, allowing users to check whether unrated content is currently being blocked or not.</p>"},{"location":"UserSettings/#events_12","title":"Events","text":"Event Description onBlockNotRatedContentChanged Triggered when the blockNotRatedContent changes."},{"location":"UserSettings/#parameters_12","title":"Parameters","text":"Name Type Description params object params.blockNotRatedContent boolean BlockNotRatedContent Enabled: true/false"},{"location":"UserSettings/#result_12","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_12","title":"Example","text":""},{"location":"UserSettings/#request_12","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setBlockNotRatedContent\",\n    \"params\": {\n        \"blockNotRatedContent\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_12","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setBlockNotRatedContent\", \n\"params\":{\"blockNotRatedContent\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setBlockNotRatedContent(blockNotRatedContent) {\n  thunderJS.setBlockNotRatedContent({ blockNotRatedContent: blockNotRatedContent })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setBlockNotRatedContent(true)\"&gt;setBlockNotRatedContent&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setBlockNotRatedContent(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"blockNotRatedContent\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setpinonpurchase","title":"setPinOnPurchase","text":"<p>The <code>setPinOnPurchase</code> API allows users to enable or disable the requirement of a PIN when making purchases. This feature is particularly useful for households with multiple users, especially when there are children or individuals who should not have unrestricted access to purchasing content. By enabling this setting, users can ensure that a PIN must be entered before any purchase is completed, adding an extra layer of security and preventing unauthorized or accidental purchases. Conversely, disabling this setting removes the PIN requirement, allowing purchases to be made more conveniently but with less control.</p> <p>This setting is part of the broader parental control and security features available in the system, giving users the flexibility to manage their preferences based on their specific needs.</p>"},{"location":"UserSettings/#related-functions_13","title":"Related Functions","text":"<p>getPinOnPurchase : Retrieves the current status of the \"PIN on Purchase\" setting, indicating whether the PIN requirement is enabled or disabled.</p>"},{"location":"UserSettings/#events_13","title":"Events","text":"Event Description onPinOnPurchaseChanged Triggered when the pin on the purchase changes."},{"location":"UserSettings/#parameters_13","title":"Parameters","text":"Name Type Description params object params.pinOnPurchase boolean setPinOnPurchase Enabled: true/false"},{"location":"UserSettings/#result_13","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_13","title":"Example","text":""},{"location":"UserSettings/#request_13","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setPinOnPurchase\",\n    \"params\": {\n        \"pinOnPurchase\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_13","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setPinOnPurchase\", \n\"params\":{\"pinOnPurchase\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setPinOnPurchase(pinOnPurchase) {\n  thunderJS.setPinOnPurchase(pinOnPurchase)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setPinOnPurchase(true)\"&gt;setPinOnPurchase&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setPinOnPurchase(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"pinOnPurchase\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#sethighcontrast","title":"setHighContrast","text":"<p>The <code>setHighContrast</code> API allows users to enable or disable the high contrast mode on their device. High contrast mode is a feature designed to improve the visibility of text and interface elements for users with visual impairments or those who prefer a more distinct visual presentation. When enabled, the device adjusts its display settings to use a higher contrast color scheme, making text and other elements stand out more clearly against their backgrounds. This feature is particularly useful for accessibility purposes, ensuring that the device is more inclusive and user-friendly for individuals with specific visual needs.</p>"},{"location":"UserSettings/#related-functions_14","title":"Related Functions","text":"<p>getHighContrast : Retrieves the current status of the high contrast mode, indicating whether it is enabled or disabled.</p>"},{"location":"UserSettings/#events_14","title":"Events","text":"Event Description onHighContrastChanged Triggers when the highContrast changes."},{"location":"UserSettings/#parameters_14","title":"Parameters","text":"Name Type Description params object params.enabled boolean high contrast enabled(true) or disabled(false)"},{"location":"UserSettings/#result_14","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_14","title":"Example","text":""},{"location":"UserSettings/#request_14","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setHighContrast\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_14","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setHighContrast\", \n\"params\":{\"enabled\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setHighContrast(params) {\n  thunderJS.setHighContrast(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setHighContrast({enabled: true})\"&gt;setHighContrast&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void setHighContrast(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enabled\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setvoiceguidance","title":"setVoiceGuidance","text":"<p>The <code>setVoiceGuidance</code> API allows users to enable or disable the voice guidance feature on their device. Voice guidance is an accessibility feature designed to assist visually impaired users by providing audio feedback for on-screen content and navigation. By enabling this feature, users can receive spoken instructions and descriptions, making it easier to interact with the device's interface. Disabling the feature turns off the audio feedback, reverting the device to its standard visual interface.</p> <p>This API is particularly useful for users who rely on auditory cues to navigate menus, access content, or perform other tasks on their device. It ensures a more inclusive and accessible user experience.</p>"},{"location":"UserSettings/#related-functions_15","title":"Related Functions","text":"<p>getVoiceGuidance : Retrieves the current status of the voice guidance feature (enabled or disabled). setVoiceGuidanceRate : Adjusts the speed at which the voice guidance audio is delivered. setVoiceGuidanceHints : Configures additional hints or prompts provided by the voice guidance feature.</p>"},{"location":"UserSettings/#events_15","title":"Events","text":"Event Description onVoiceGuidanceChanged Triggers after the voice guidance enabled settings changes."},{"location":"UserSettings/#parameters_15","title":"Parameters","text":"Name Type Description params object params.enabled boolean voice guidance enabled(true) or disabled(false)"},{"location":"UserSettings/#result_15","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_15","title":"Example","text":""},{"location":"UserSettings/#request_15","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setVoiceGuidance\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_15","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setVoiceGuidance\", \n\"params\":{\"enabled\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setVoiceGuidance(params) {\n  thunderJS.setVoiceGuidance(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setVoiceGuidance({enabled: true})\"&gt;setVoiceGuidance&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setVoiceGuidance(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"enabled\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setvoiceguidancerate","title":"setVoiceGuidanceRate","text":"<p>The <code>setVoiceGuidanceRate</code> API allows users to adjust the speed at which voice guidance is delivered. Voice guidance is an accessibility feature designed to assist visually impaired users by providing spoken feedback about on-screen content and navigation. By using this API, users can customize the rate of speech to suit their preferences, making the experience more comfortable and tailored to their needs. The rate can be set within a predefined range, ensuring that the speech remains intelligible and effective. This feature is particularly useful for users who may prefer faster or slower speech depending on their listening abilities or familiarity with the content.</p>"},{"location":"UserSettings/#related-functions_16","title":"Related Functions","text":"<p>getVoiceGuidanceRate : Retrieves the current voice guidance rate setting, allowing users to confirm or review the configured speech rate. setVoiceGuidance : Enables or disables the voice guidance feature, which must be active for the rate setting to take effect. getVoiceGuidance : Checks whether the voice guidance feature is currently enabled or disabled. setVoiceGuidanceHints : Configures additional hints or prompts provided by the voice guidance system, complementing the rate setting. getVoiceGuidanceHints : Retrieves the current status of voice guidance hints, providing insight into the overall voice guidance configuration.</p>"},{"location":"UserSettings/#events_16","title":"Events","text":"Event Description onVoiceGuidanceRateChanged Triggered after the voice guidance rate changed."},{"location":"UserSettings/#parameters_16","title":"Parameters","text":"Name Type Description params object params.rate number voice guidance rate value"},{"location":"UserSettings/#result_16","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_16","title":"Example","text":""},{"location":"UserSettings/#request_16","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setVoiceGuidanceRate\",\n    \"params\": {\n        \"rate\": 0.1\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_16","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setVoiceGuidanceRate\", \n\"params\":{\"rate\":0.1}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setVoiceGuidanceRate(rate) {\n  thunderJS.setVoiceGuidanceRate({ rate: rate })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setVoiceGuidanceRate(0.1)\"&gt;setVoiceGuidanceRate&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setVoiceGuidanceRate(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"rate\"] = 0.1;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setvoiceguidancehints","title":"setVoiceGuidanceHints","text":"<p>The <code>setVoiceGuidanceHints</code> API allows users to enable or disable voice guidance hints in their system settings. Voice guidance hints are additional auditory cues or instructions provided to assist users in navigating and interacting with the system, particularly beneficial for individuals with visual impairments or those who prefer audio-based guidance. By enabling this feature, users can receive contextual hints that enhance their overall accessibility experience. Conversely, disabling it will turn off these auditory cues, providing a more streamlined experience for users who do not require them.</p> <p>This API is particularly useful for tailoring the accessibility settings of the system to meet individual user preferences. It ensures that users can customize their interaction with the system to suit their needs, making it more inclusive and user-friendly.</p>"},{"location":"UserSettings/#related-functions_17","title":"Related Functions","text":"<p>getVoiceGuidanceHints : Retrieves the current status of voice guidance hints (enabled or disabled), allowing users to check whether the feature is active.</p>"},{"location":"UserSettings/#events_17","title":"Events","text":"Event Description onVoiceGuidanceHintsChanged Triggered after the voice guidance hints changes."},{"location":"UserSettings/#parameters_17","title":"Parameters","text":"Name Type Description params object params.hints boolean voiceGuidanceHints enabled(true) or disabled(false)"},{"location":"UserSettings/#result_17","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_17","title":"Example","text":""},{"location":"UserSettings/#request_17","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setVoiceGuidanceHints\",\n    \"params\": {\n        \"hints\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_17","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setVoiceGuidanceHints\", \n\"params\":{\"hints\":true}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setVoiceGuidanceHints(params) {\n  thunderJS.setVoiceGuidanceHints(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setVoiceGuidanceHints({hints: true})\"&gt;setVoiceGuidanceHints&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void setVoiceGuidanceHints(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"hints\"] = true;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#setcontentpin","title":"setContentPin","text":"<p>The <code>setContentPin</code> function allows users to set or update the content PIN for their account. This PIN is typically used to restrict access to certain content or features, ensuring that only authorized users can view or modify restricted settings. The PIN must be a 4-digit numeric value, ensuring simplicity and ease of use. If an empty string is provided, the existing PIN is cleared. This function is particularly useful for parents or guardians who want to enforce content restrictions for children or other users.  </p>"},{"location":"UserSettings/#related-functions_18","title":"Related Functions","text":"<p>getContentPin : Retrieves the currently set content PIN, allowing users to verify or confirm the existing PIN.</p>"},{"location":"UserSettings/#events_18","title":"Events","text":"Event Description onContentPinChanged Triggered when the ContentPin changes."},{"location":"UserSettings/#parameters_18","title":"Parameters","text":"Name Type Description params object params.contentPin string contentPin"},{"location":"UserSettings/#result_18","title":"Result","text":"Name Type Description result null On success null will be returned"},{"location":"UserSettings/#example_18","title":"Example","text":""},{"location":"UserSettings/#request_18","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.setContentPin\",\n    \"params\": {\n        \"contentPin\": \"1234\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_18","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": null\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.setContentPin\", \n\"params\":{\"contentPin\":\"1234\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction setContentPin(contentPin) {\n  thunderJS.setContentPin({ contentPin: contentPin })\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"setContentPin('1234')\"&gt;setContentPin&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_setContentPin(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"contentPin\"] = \"1234\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getaudiodescription","title":"getAudioDescription","text":"<p>The <code>getAudioDescription</code> API is used to retrieve the current status of the audio description feature. Audio description is an accessibility feature that provides additional audio narration to describe visual elements in a video, such as actions, settings, and characters, for individuals who are visually impaired. This API allows users to check whether the audio description feature is enabled or disabled, helping them ensure that the accessibility settings align with their preferences or requirements.  </p>"},{"location":"UserSettings/#related-functions_19","title":"Related Functions","text":"<p>setAudioDescription : This API allows users to enable or disable the audio description feature. It complements the <code>getAudioDescription</code> API by providing the ability to modify the audio description setting.</p>"},{"location":"UserSettings/#events_19","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_19","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_19","title":"Result","text":"Name Type Description result boolean Audio Description Enabled: true/false"},{"location":"UserSettings/#example_19","title":"Example","text":""},{"location":"UserSettings/#request_19","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getAudioDescription\"\n}\n</code></pre>"},{"location":"UserSettings/#response_19","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getAudioDescription\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getAudioDescription() {\n  thunderJS.getAudioDescription()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getAudioDescription()\"&gt;getAudioDescription&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void getAudioDescription(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getpreferredaudiolanguages","title":"getPreferredAudioLanguages","text":"<p>The <code>getPreferredAudioLanguages</code> API retrieves the user's preferred audio languages for media playback. This function is particularly useful for users who consume content in multiple languages or have specific language preferences for audio tracks. By accessing this information, the system can automatically select the most suitable audio track based on the user's preferences, enhancing the viewing experience without requiring manual adjustments. This API ensures that users can enjoy content in their desired language seamlessly, making it ideal for multilingual households or individuals with specific language needs.</p>"},{"location":"UserSettings/#related-functions_20","title":"Related Functions","text":"<p>setPreferredAudioLanguages : Allows users to set their preferred audio languages, which can later be retrieved using the <code>getPreferredAudioLanguages</code> API.</p>"},{"location":"UserSettings/#events_20","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_20","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_20","title":"Result","text":"Name Type Description result string A prioritized list of ISO 639-2/B codes for the preferred audio languages"},{"location":"UserSettings/#example_20","title":"Example","text":""},{"location":"UserSettings/#request_20","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPreferredAudioLanguages\"\n}\n</code></pre>"},{"location":"UserSettings/#response_20","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"eng\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPreferredAudioLanguages\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getPreferredAudioLanguages() {\n  thunderJS.org.rdk.UserSettings.getPreferredAudioLanguages()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getPreferredAudioLanguages()\"&gt;getPreferredAudioLanguages&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getPreferredAudioLanguages(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getpresentationlanguage","title":"getPresentationLanguage","text":"<p>The <code>getPresentationLanguage</code> API retrieves the current presentation language setting for the user. This language setting determines the primary language used for on-screen menus, notifications, and other user interface elements. It ensures that the user interface is displayed in the language most comfortable for the user, enhancing accessibility and personalization. This function is particularly useful for multi-lingual households or users who prefer a specific language for their viewing experience.</p>"},{"location":"UserSettings/#related-functions_21","title":"Related Functions","text":"<p>setPresentationLanguage : Allows the user to set or update the preferred presentation language. This function complements <code>getPresentationLanguage</code> by enabling the modification of the language setting.</p>"},{"location":"UserSettings/#events_21","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_21","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_21","title":"Result","text":"Name Type Description result string The preferred presentationLanguage in a full BCP 47 value, including script, * region, variant The language set and used by Immerse UI"},{"location":"UserSettings/#example_21","title":"Example","text":""},{"location":"UserSettings/#request_21","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPresentationLanguage\"\n}\n</code></pre>"},{"location":"UserSettings/#response_21","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"en-US\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPresentationLanguage\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction callUserSettings() {\n  thunderJS.org.rdk.UserSettings.getPresentationLanguage()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"callUserSettings()\"&gt;callUserSettings&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getPresentationLanguage(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getcaptions","title":"getCaptions","text":"<p>The <code>getCaptions</code> API is designed to retrieve the current status of captions functionality in the user settings. Captions are textual representations of spoken dialogue, sound effects, and other audio elements in video content, making it accessible for individuals who are deaf or hard of hearing. This API allows users to check whether captions are enabled or disabled in their system settings. By using this function, users can confirm the current state of captions and ensure that their accessibility preferences are correctly configured.</p> <p>This API is particularly useful for users who want to verify their accessibility settings or for applications that need to adapt their behavior based on whether captions are enabled. For example, streaming platforms or media players can use this API to display captions automatically if they are enabled in the user's settings.</p>"},{"location":"UserSettings/#related-functions_22","title":"Related Functions","text":"<p>setCaptions : Allows users to enable or disable captions functionality in the system settings. This function complements <code>getCaptions</code> by providing the ability to modify the captions setting.  </p> <p>getPreferredCaptionsLanguages : Retrieves the user's preferred languages for captions, ensuring that captions are displayed in the desired language when available.  </p> <p>setPreferredCaptionsLanguages : Sets the user's preferred languages for captions, enabling customization of caption language preferences.  </p> <p>getPreferredClosedCaptionService : Retrieves the preferred closed captioning service configured by the user, providing additional customization options for captions.  </p> <p>setPreferredClosedCaptionService : Allows users to set their preferred closed captioning service, complementing the retrieval functionality of <code>getPreferredClosedCaptionService</code>.</p>"},{"location":"UserSettings/#events_22","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_22","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_22","title":"Result","text":"Name Type Description result boolean Captions Enabled: true/false"},{"location":"UserSettings/#example_22","title":"Example","text":""},{"location":"UserSettings/#request_22","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getCaptions\"\n}\n</code></pre>"},{"location":"UserSettings/#response_22","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getCaptions\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getCaptions() {\n  thunderJS.getCaptions()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getCaptions()\"&gt;getCaptions&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getCaptions(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getpreferredcaptionslanguages","title":"getPreferredCaptionsLanguages","text":"<p>The <code>getPreferredCaptionsLanguages</code> API retrieves the user's preferred languages for captions. Captions are textual representations of spoken dialogue and other audio elements in video content, designed to enhance accessibility for viewers who are deaf, hard of hearing, or prefer to watch content with text-based assistance. This function allows users to access their current preferences for caption languages, ensuring that video content is displayed in a language that aligns with their needs or preferences. By using this API, users can verify or confirm the caption language settings they have previously configured.</p> <p>This API is particularly useful for users who consume multilingual content or require captions in specific languages for better comprehension. It ensures that the viewing experience is tailored to the user's linguistic preferences, enhancing accessibility and personalization.</p>"},{"location":"UserSettings/#related-functions_23","title":"Related Functions","text":"<p>setPreferredCaptionsLanguages : Allows users to set their preferred languages for captions. This function complements <code>getPreferredCaptionsLanguages</code> by enabling users to update or modify their caption language preferences.</p>"},{"location":"UserSettings/#events_23","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_23","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_23","title":"Result","text":"Name Type Description result string A prioritized list of ISO 639-2/B codes for the preferred captions languages"},{"location":"UserSettings/#example_23","title":"Example","text":""},{"location":"UserSettings/#request_23","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPreferredCaptionsLanguages\"\n}\n</code></pre>"},{"location":"UserSettings/#response_23","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"eng\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPreferredCaptionsLanguages\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getPreferredCaptionsLanguages() {\n  thunderJS.getPreferredCaptionsLanguages()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getPreferredCaptionsLanguages()\"&gt;getPreferredCaptionsLanguages&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getPreferredCaptionsLanguages(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getpreferredclosedcaptionservice","title":"getPreferredClosedCaptionService","text":"<p>The <code>getPreferredClosedCaptionService</code> function retrieves the user's preferred closed captioning service setting. Closed captioning services provide on-screen text descriptions of spoken dialogue, sound effects, and other audio elements in video content, making it accessible to individuals who are deaf or hard of hearing. This function allows users to check which closed captioning service is currently set as their preference, ensuring that their viewing experience aligns with their accessibility needs. The retrieved value can be used to confirm or adjust settings as needed.</p>"},{"location":"UserSettings/#related-functions_24","title":"Related Functions","text":"<p>setPreferredClosedCaptionService : Allows users to set their preferred closed captioning service. This function complements <code>getPreferredClosedCaptionService</code> by enabling the modification of the preferred service.</p>"},{"location":"UserSettings/#events_24","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_24","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_24","title":"Result","text":"Name Type Description result string A string for the preferred closed captions service.  Valid values are AUTO, CC[1-4], TEXT[1-4], SERVICE[1-64] where CC and TEXT is CTA-608 and SERVICE is CTA-708.  AUTO indicates that the choice is left to the player"},{"location":"UserSettings/#example_24","title":"Example","text":""},{"location":"UserSettings/#request_24","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPreferredClosedCaptionService\"\n}\n</code></pre>"},{"location":"UserSettings/#response_24","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"CC3\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPreferredClosedCaptionService\"}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getPreferredClosedCaptionService() {\n  thunderJS.getPreferredClosedCaptionService()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getPreferredClosedCaptionService()\"&gt;getPreferredClosedCaptionService&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getPreferredClosedCaptionService(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getprivacymode","title":"getPrivacyMode","text":"<p>The <code>getPrivacyMode</code> API retrieves the current privacy mode setting of the device. Privacy mode determines how user data is handled, specifically whether it is shared or not. The privacy mode can have two values: <code>\"SHARE\"</code> or <code>\"DO_NOT_SHARE\"</code>. When set to <code>\"SHARE\"</code>, the device allows sharing of user data, while <code>\"DO_NOT_SHARE\"</code> ensures that user data remains private and is not shared. This API is useful for users who want to verify the current privacy configuration of their device to ensure it aligns with their preferences for data sharing and privacy.</p>"},{"location":"UserSettings/#related-functions_25","title":"Related Functions","text":"<p>setPrivacyMode : Allows users to update the privacy mode setting to either <code>\"SHARE\"</code> or <code>\"DO_NOT_SHARE\"</code>.</p>"},{"location":"UserSettings/#events_25","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_25","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_25","title":"Result","text":"Name Type Description result string The Privacy Mode. Valid values are SHARE, DO_NOT_SHARE"},{"location":"UserSettings/#example_25","title":"Example","text":""},{"location":"UserSettings/#request_25","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPrivacyMode\"\n}\n</code></pre>"},{"location":"UserSettings/#response_25","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"SHARE\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPrivacyMode\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getPrivacyMode() {\n  thunderJS.getPrivacyMode()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getPrivacyMode()\"&gt;getPrivacyMode&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getPrivacyMode(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getpincontrol","title":"getPinControl","text":"<p>The <code>getPinControl</code> API is used to retrieve the current status of the PIN control feature in the user settings. PIN control is a security feature that allows users to restrict access to certain content or functionalities by requiring a PIN for authentication. This API is particularly useful for users who want to verify whether PIN control is enabled or disabled on their device. By using this function, users can ensure that their content and settings are protected according to their preferences.</p>"},{"location":"UserSettings/#related-functions_26","title":"Related Functions","text":"<p>setPinControl : Allows users to enable or disable the PIN control feature by setting its value.</p>"},{"location":"UserSettings/#events_26","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_26","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_26","title":"Result","text":"Name Type Description result boolean Pin Control Enabled: true/false"},{"location":"UserSettings/#example_26","title":"Example","text":""},{"location":"UserSettings/#request_26","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPinControl\"\n}\n</code></pre>"},{"location":"UserSettings/#response_26","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPinControl\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction callMethod() {\n  thunderJS.org.rdk.UserSettings.getPinControl()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"callMethod()\"&gt;callMethod&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void getPinControl(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getviewingrestrictions","title":"getViewingRestrictions","text":"<p>The <code>getViewingRestrictions</code> API retrieves the current viewing restrictions set for the user. Viewing restrictions are rules or limitations applied to the content that can be accessed, typically based on factors such as age ratings, parental controls, or content categories. This function is particularly useful for users who want to verify the restrictions currently in place, ensuring that the content available aligns with their preferences or parental control settings. For example, parents can use this API to confirm that age-appropriate restrictions are active for their children.</p> <p>This API is a read-only function, meaning it does not modify any settings but simply provides the current state of the viewing restrictions.</p>"},{"location":"UserSettings/#related-functions_27","title":"Related Functions","text":"<p>setViewingRestrictions : Allows users to configure or update the viewing restrictions. This function complements <code>getViewingRestrictions</code> by enabling the modification of the restrictions that can later be retrieved using this API.</p>"},{"location":"UserSettings/#events_27","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_27","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_27","title":"Result","text":"Name Type Description result string A project-specific representation of the time interval when viewing"},{"location":"UserSettings/#example_27","title":"Example","text":""},{"location":"UserSettings/#request_27","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getViewingRestrictions\"\n}\n</code></pre>"},{"location":"UserSettings/#response_27","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"{\\\"restrictions\\\": [{\\\"scheme\\\": \\\"US_TV\\\", \\\"restrict\\\": [\\\"TV-Y7/FV\\\"]}, {\\\"scheme\\\": \\\"MPAA\\\", \\\"restrict\\\": []}]}\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getViewingRestrictions\", \n\"params\":{}}\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getViewingRestrictions() {\n  thunderJS.getViewingRestrictions()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getViewingRestrictions()\"&gt;getViewingRestrictions&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void org_rdk_UserSettings_getViewingRestrictions(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\nprintf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\nJsonObject parameters, response;\nstd::string result;\nif (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n    response.ToString(result);\n    printf(\"Response: '%s'\", result.c_str());\n}\n}\n</code></pre>"},{"location":"UserSettings/#getviewingrestrictionswindow","title":"getViewingRestrictionsWindow","text":"<p>The <code>getViewingRestrictionsWindow</code> API retrieves the current time window during which specific viewing restrictions are applied. This function is particularly useful for users who want to understand the active time frame for content restrictions, such as parental controls or content access limitations. By accessing this information, users can ensure that the restrictions align with their preferences or household requirements. For example, parents can verify the time periods during which certain content is restricted to ensure a safe viewing environment for children.</p>"},{"location":"UserSettings/#related-functions_28","title":"Related Functions","text":"<p>setViewingRestrictionsWindow : Allows users to configure or modify the time window during which viewing restrictions are enforced.</p>"},{"location":"UserSettings/#events_28","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_28","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_28","title":"Result","text":"Name Type Description result string A project-specific representation of the time interval"},{"location":"UserSettings/#example_28","title":"Example","text":""},{"location":"UserSettings/#request_28","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getViewingRestrictionsWindow\"\n}\n</code></pre>"},{"location":"UserSettings/#response_28","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"ALWAYS\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getViewingRestrictionsWindow\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getViewingRestrictionsWindow() {\n  thunderJS.getViewingRestrictionsWindow()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getViewingRestrictionsWindow()\"&gt;getViewingRestrictionsWindow&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void getViewingRestrictionsWindow(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getlivewatershed","title":"getLiveWatershed","text":"<p>The <code>getLiveWatershed</code> function retrieves the current status of the \"Live Watershed\" setting. This setting is typically used to enforce content restrictions based on time-sensitive guidelines, such as preventing access to certain types of content during specific hours (e.g., watershed hours). The function returns a boolean value indicating whether the \"Live Watershed\" feature is enabled (<code>true</code>) or disabled (<code>false</code>). This feature is particularly useful for households or environments where content access needs to be regulated based on time-based restrictions.</p>"},{"location":"UserSettings/#related-functions_29","title":"Related Functions","text":"<p>setLiveWatershed : Allows you to enable or disable the \"Live Watershed\" setting. Use this function to modify the status of the \"Live Watershed\" feature.</p>"},{"location":"UserSettings/#events_29","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_29","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_29","title":"Result","text":"Name Type Description result boolean Live Watershed Enabled: true/false"},{"location":"UserSettings/#example_29","title":"Example","text":""},{"location":"UserSettings/#request_29","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getLiveWatershed\"\n}\n</code></pre>"},{"location":"UserSettings/#response_29","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getLiveWatershed\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getLiveWatershed() {\n  thunderJS.getLiveWatershed()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getLiveWatershed()\"&gt;getLiveWatershed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getLiveWatershed(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getplaybackwatershed","title":"getPlaybackWatershed","text":"<p>The <code>getPlaybackWatershed</code> API retrieves the current status of the playback watershed setting. The playback watershed is a feature that allows users to control access to certain types of content based on predefined time restrictions or content ratings. This setting is particularly useful for parental control or content management purposes, ensuring that specific content is only accessible during appropriate times or under specific conditions. By using this API, users can check whether the playback watershed is enabled or disabled, helping them make informed decisions about content accessibility.</p>"},{"location":"UserSettings/#related-functions_30","title":"Related Functions","text":"<p>setPlaybackWatershed : Allows users to enable or disable the playback watershed setting. This function complements <code>getPlaybackWatershed</code> by providing the ability to modify the playback watershed status.</p>"},{"location":"UserSettings/#events_30","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_30","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_30","title":"Result","text":"Name Type Description result boolean Playback Watershed Enabled: true/false"},{"location":"UserSettings/#example_30","title":"Example","text":""},{"location":"UserSettings/#request_30","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPlaybackWatershed\"\n}\n</code></pre>"},{"location":"UserSettings/#response_30","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPlaybackWatershed\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction org_rdk_UserSettings_getPlaybackWatershed() {\n  thunderJS.org_rdk_UserSettings_getPlaybackWatershed()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"org_rdk_UserSettings_getPlaybackWatershed()\"&gt;org_rdk_UserSettings_getPlaybackWatershed&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getPlaybackWatershed(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getblocknotratedcontent","title":"getBlockNotRatedContent","text":"<p>The <code>getBlockNotRatedContent</code> API retrieves the current setting that determines whether content without a rating is blocked. This feature is particularly useful for users who want to enforce parental controls or viewing restrictions on unrated content, ensuring that only rated content is accessible. By using this API, users can check if the system is configured to block unrated content, providing an additional layer of control over the content that can be viewed.</p> <p>This API is beneficial for households with children or shared viewing environments where content restrictions are necessary. It allows users to verify the status of the \"block unrated content\" setting, ensuring that their preferences for content control are being enforced.</p>"},{"location":"UserSettings/#related-functions_31","title":"Related Functions","text":"<p>setBlockNotRatedContent : Allows users to enable or disable the blocking of unrated content. This function is used to configure the setting that <code>getBlockNotRatedContent</code> retrieves.</p>"},{"location":"UserSettings/#events_31","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_31","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_31","title":"Result","text":"Name Type Description result boolean BlockNotRatedContent Enabled: true/false"},{"location":"UserSettings/#example_31","title":"Example","text":""},{"location":"UserSettings/#request_31","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getBlockNotRatedContent\"\n}\n</code></pre>"},{"location":"UserSettings/#response_31","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary '{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getBlockNotRatedContent\", \n\"params\":{}}' \nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction executeMethod() {\n  thunderJS.org.rdk.UserSettings.getBlockNotRatedContent()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"executeMethod()\"&gt;executeMethod&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getBlockNotRatedContent(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getpinonpurchase","title":"getPinOnPurchase","text":"<p>The <code>getPinOnPurchase</code> function retrieves the current status of the \"PIN on Purchase\" setting. This setting determines whether a PIN is required to authorize purchases, providing an additional layer of security to prevent unauthorized transactions. When enabled, users must enter their PIN before completing any purchase, ensuring that only authorized individuals can make purchases on the platform. This feature is particularly useful for households with multiple users, including children, as it helps prevent accidental or unauthorized purchases.</p>"},{"location":"UserSettings/#related-functions_32","title":"Related Functions","text":"<p>setPinOnPurchase : Allows users to enable or disable the \"PIN on Purchase\" setting. This function is used to configure the status that can later be retrieved using <code>getPinOnPurchase</code>.</p>"},{"location":"UserSettings/#events_32","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_32","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_32","title":"Result","text":"Name Type Description result boolean PinOnPurchase Enabled: true/false"},{"location":"UserSettings/#example_32","title":"Example","text":""},{"location":"UserSettings/#request_32","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getPinOnPurchase\"\n}\n</code></pre>"},{"location":"UserSettings/#response_32","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getPinOnPurchase\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getPinOnPurchase() {\n  thunderJS.getPinOnPurchase()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getPinOnPurchase()\"&gt;getPinOnPurchase&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>void org_rdk_UserSettings_getPinOnPurchase(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#gethighcontrast","title":"getHighContrast","text":"<p>The <code>getHighContrast</code> API is designed to retrieve the current status of the High Contrast mode setting. High Contrast mode is an accessibility feature that enhances the visibility of on-screen elements by adjusting the color scheme to provide better contrast between text, images, and backgrounds. This feature is particularly beneficial for users with visual impairments or those who find it difficult to distinguish between similar colors. By using this API, users can determine whether High Contrast mode is currently enabled or disabled on their device.</p>"},{"location":"UserSettings/#related-functions_33","title":"Related Functions","text":"<p>setHighContrast : Allows users to enable or disable the High Contrast mode. This function complements <code>getHighContrast</code> by providing the ability to modify the High Contrast setting.</p>"},{"location":"UserSettings/#events_33","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_33","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_33","title":"Result","text":"Name Type Description result boolean HighContrast Enabled: true/false"},{"location":"UserSettings/#example_33","title":"Example","text":""},{"location":"UserSettings/#request_33","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getHighContrast\"\n}\n</code></pre>"},{"location":"UserSettings/#response_33","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getHighContrast\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getHighContrast() {\n  thunderJS.getHighContrast()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getHighContrast()\"&gt;getHighContrast&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getHighContrast(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getvoiceguidance","title":"getVoiceGuidance","text":"<p>The <code>getVoiceGuidance</code> API is designed to retrieve the current status of the voice guidance feature in a user settings environment. Voice guidance is an accessibility feature that provides audio feedback to assist users in navigating and interacting with the system. This API allows users to check whether voice guidance is enabled or disabled, helping them understand the current accessibility configuration of their device. It is particularly useful for users who rely on audio cues for system navigation due to visual impairments or other accessibility needs.</p>"},{"location":"UserSettings/#related-functions_34","title":"Related Functions","text":"<p>setVoiceGuidance : Allows users to enable or disable the voice guidance feature. This function complements <code>getVoiceGuidance</code> by providing the ability to modify the voice guidance setting.</p>"},{"location":"UserSettings/#events_34","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_34","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_34","title":"Result","text":"Name Type Description result boolean voiceGuidance Enabled: true/false"},{"location":"UserSettings/#example_34","title":"Example","text":""},{"location":"UserSettings/#request_34","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getVoiceGuidance\"\n}\n</code></pre>"},{"location":"UserSettings/#response_34","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getVoiceGuidance\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getVoiceGuidance() {\n  thunderJS.getVoiceGuidance()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getVoiceGuidance()\"&gt;getVoiceGuidance&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getVoiceGuidance(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getvoiceguidancerate","title":"getVoiceGuidanceRate","text":"<p>The <code>getVoiceGuidanceRate</code> API retrieves the current rate of voice guidance, which is a feature designed to assist users by providing spoken feedback for navigation and interaction within the system. The voice guidance rate determines the speed at which the spoken feedback is delivered, allowing users to customize the pace to suit their preferences or accessibility needs. This API is particularly useful for users who rely on voice guidance for accessibility purposes, enabling them to check the current rate and make adjustments if necessary.</p>"},{"location":"UserSettings/#related-functions_35","title":"Related Functions","text":"<p>setVoiceGuidanceRate : Allows users to set the desired rate for voice guidance, enabling customization of the speed at which spoken feedback is delivered.</p>"},{"location":"UserSettings/#events_35","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_35","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_35","title":"Result","text":"Name Type Description result number voice guidance rate value"},{"location":"UserSettings/#example_35","title":"Example","text":""},{"location":"UserSettings/#request_35","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getVoiceGuidanceRate\"\n}\n</code></pre>"},{"location":"UserSettings/#response_35","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": 0.1\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getVoiceGuidanceRate\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getVoiceGuidanceRate() {\n  thunderJS.getVoiceGuidanceRate()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getVoiceGuidanceRate()\"&gt;getVoiceGuidanceRate&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getVoiceGuidanceRate(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getvoiceguidancehints","title":"getVoiceGuidanceHints","text":"<p>The <code>getVoiceGuidanceHints</code> function retrieves the current status of voice guidance hints in the system. Voice guidance hints are additional audio cues or instructions designed to assist users, particularly those with visual impairments, in navigating and interacting with the system more effectively. This function is useful for determining whether these hints are currently enabled or disabled, allowing users to understand the accessibility settings of their device.</p> <p>Voice guidance hints can provide supplementary information, such as contextual tips or detailed descriptions, to enhance the overall user experience. This feature is particularly beneficial for users who rely on audio feedback for accessibility.</p>"},{"location":"UserSettings/#related-functions_36","title":"Related Functions","text":"<p>setVoiceGuidanceHints : Allows users to enable or disable voice guidance hints.</p>"},{"location":"UserSettings/#events_36","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_36","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_36","title":"Result","text":"Name Type Description result boolean voiceGuidanceHints Enabled: true/false"},{"location":"UserSettings/#example_36","title":"Example","text":""},{"location":"UserSettings/#request_36","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getVoiceGuidanceHints\"\n}\n</code></pre>"},{"location":"UserSettings/#response_36","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getVoiceGuidanceHints\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getVoiceGuidanceHints() {\n  thunderJS.getVoiceGuidanceHints()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getVoiceGuidanceHints()\"&gt;getVoiceGuidanceHints&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getVoiceGuidanceHints(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getmigrationstate","title":"getMigrationState","text":"<p>The <code>getMigrationState</code> API is designed to help users determine whether a specific setting requires migration. Migration in this context refers to the process of updating or transitioning a setting from an older format or system to a newer one. This API takes a specific settings key as input and returns a boolean value indicating whether migration is required for that key. This functionality is particularly useful for ensuring that user settings are up-to-date and compatible with the latest system requirements, providing a seamless user experience.</p> <p>By using this API, users can identify settings that need attention and take appropriate actions to ensure their system operates optimally. It is a diagnostic tool that helps maintain the integrity and compatibility of user settings.</p>"},{"location":"UserSettings/#related-functions_37","title":"Related Functions","text":"<p>getMigrationStates : Provides a comprehensive list of all settings and their respective migration states, allowing users to view the migration requirements for multiple settings at once.</p>"},{"location":"UserSettings/#events_37","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_37","title":"Parameters","text":"Name Type Description params object params.key string the property key, for which we need to get migration state"},{"location":"UserSettings/#result_37","title":"Result","text":"Name Type Description result boolean migration state of the respective key true/false"},{"location":"UserSettings/#example_37","title":"Example","text":""},{"location":"UserSettings/#request_37","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getMigrationState\",\n    \"params\": {\n        \"key\": \"VOICE_GUIDANCE_RATE\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#response_37","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": true\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getMigrationState\", \n\"params\":{\"key\":\"VOICE_GUIDANCE_RATE\"}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getMigrationState(params) {\n  thunderJS.getMigrationState(params)\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getMigrationState({ key: 'VOICE_GUIDANCE_RATE' })\"&gt;getMigrationState&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getMigrationState(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    parameters[\"key\"] = \"VOICE_GUIDANCE_RATE\";\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getmigrationstates","title":"getMigrationStates","text":"<p>The <code>getMigrationStates</code> API provides a comprehensive overview of the migration status for various user settings. This function is particularly useful for identifying which settings require migration to ensure compatibility with updated system configurations or new application versions. By invoking this API, users can retrieve a list of settings along with their respective migration states, indicating whether a specific setting requires migration or not. This information is essential for maintaining a seamless user experience during system upgrades or transitions, as it helps in proactively addressing potential issues related to outdated or incompatible settings.</p>"},{"location":"UserSettings/#related-functions_38","title":"Related Functions","text":"<p>getMigrationState : This function retrieves the migration state for a specific setting key, allowing users to check the migration requirement for an individual setting.</p>"},{"location":"UserSettings/#events_38","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_38","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_38","title":"Result","text":"Name Type Description result array migration state of all the defined keys result[#] object Keys and it's migration states result[#]?.key string <sup>(optional)</sup> key of the property result[#]?.requiresMigration boolean <sup>(optional)</sup> migration state of the property"},{"location":"UserSettings/#example_38","title":"Example","text":""},{"location":"UserSettings/#request_38","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getMigrationStates\"\n}\n</code></pre>"},{"location":"UserSettings/#response_38","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": [\n        {\n            \"key\": \"PREFERRED_AUDIO_LANGUAGES\",\n            \"requiresMigration\": true\n        }\n    ]\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getMigrationStates\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction callMethod() {\n  thunderJS.org.rdk.UserSettings.getMigrationStates()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"callMethod()\"&gt;callMethod&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getMigrationStates(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#getcontentpin","title":"getContentPin","text":"<p>The <code>getContentPin</code> API retrieves the current content PIN set by the user. The content PIN is a four-digit numeric code used to enforce parental controls, restrict access to certain content, or manage other security-related settings. This API is useful for users who want to verify or retrieve the existing PIN for reference or validation purposes. If no PIN is set, the API may return an empty value, indicating that no content PIN is currently configured.</p> <p>This function is particularly helpful in scenarios where users need to confirm their PIN before making changes to settings, such as enabling or disabling parental controls, or when troubleshooting PIN-related issues.</p>"},{"location":"UserSettings/#related-functions_39","title":"Related Functions","text":"<p>setContentPin : Allows users to set or update the content PIN. This function is complementary to <code>getContentPin</code>, as it enables the configuration of the PIN that can later be retrieved using <code>getContentPin</code>.</p>"},{"location":"UserSettings/#events_39","title":"Events","text":"<p>No Events</p>"},{"location":"UserSettings/#parameters_39","title":"Parameters","text":"<p>This method takes no parameters.</p>"},{"location":"UserSettings/#result_39","title":"Result","text":"Name Type Description result string contentPin"},{"location":"UserSettings/#example_39","title":"Example","text":""},{"location":"UserSettings/#request_39","title":"Request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"method\": \"org.rdk.UserSettings.getContentPin\"\n}\n</code></pre>"},{"location":"UserSettings/#response_39","title":"Response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 42,\n    \"result\": \"1234\"\n}\n</code></pre> CURLJSCPP <pre><code>curl -H 'content-type:text/plain;' --data-binary \n'{\"jsonrpc\":\"2.0\", \n\"id\":3, \n\"method\":\"org.rdk.UserSettings.getContentPin\", \n\"params\":{}}'\nhttp://127.0.0.1:9998/jsonrpc\n</code></pre> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;ThunderJS - Browser example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar thunderJS\nvar defaultHost = localStorage.getItem('host')\nvar host = prompt('Please inform the IP address of your STB', defaultHost || '192.168.')\nlocalStorage.setItem('host', host)\nthunderJS = ThunderJS({\n  host: host,\n})\nfunction getContentPin() {\n  thunderJS.getContentPin()\n    .then(function(result) {\n      log('Success', result)\n    })\n    .catch(function(error) {\n      log('Error', error)\n    })\n}\nfunction log(msg, content) {\n  var el = document.getElementById('log')\n  var entry = '&lt;p class=\"font-bold\"&gt;' + msg + '&lt;/p&gt;'\n  if (content) {\n    entry += '&lt;pre class=\"border mt-4 mb-8 text-sm\"&gt;' + JSON.stringify(content, null, 2) + '&lt;/pre&gt;'\n  }\n  entry += '&lt;hr class=\"border-b\" /&gt;'\n  el.innerHTML += entry\n}\n&lt;/script&gt;\n&lt;button onclick=\"getContentPin()\"&gt;getContentPin&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>    void org_rdk_UserSettings_getContentPin(std::string methodName, JSONRPC::LinkType&lt;Core::JSON::IElement&gt; *remoteObject)\n{\n    printf(\"[%llu] Inside (%s)\", TimeStamp(), __FUNCTION__);\n    JsonObject parameters, response;\n    std::string result;\n    if (invokeJSONRPC(remoteObject, methodName, parameters, response)) {\n        response.ToString(result);\n        printf(\"Response: '%s'\", result.c_str());\n    }\n}\n</code></pre>"},{"location":"UserSettings/#notifications","title":"Notifications","text":"<p>Notifications are autonomous events, triggered by the internals of the implementation, and broadcasted via JSON-RPC to all registered observers. Refer to [Thunder] for information on how to register for a notification.</p> <p>The following events are provided by the org.rdk.UserSettings plugin:</p> <p>org.rdk.UserSettings interface events:</p> Event Description onAudioDescriptionChanged Triggered after the audio description changes (see <code>SetAudioDescription</code>) onPreferredAudioLanguagesChanged Triggered after the audio preferred Audio languages changes (see <code>SetPreferredAudioLanguages</code>) onPresentationLanguageChanged Triggered after the Presentation Language changes (see <code>SetPresentationLanguage</code>) onCaptionsChanged Triggered after the captions changes (see <code>SetCaptions</code>) onPreferredCaptionsLanguagesChanged Triggered after the PreferredCaption Languages changes (see <code>SetPreferredCaptionsLanguages</code>) onPreferredClosedCaptionServiceChanged Triggered after the Preferred Closed Caption changes (see <code>SetPreferredClosedCaptionService</code>) onPrivacyModeChanged Triggered after the Privacy Mode changes (see <code>SetPrivacyMode</code>) onPinControlChanged Triggered after the pin control changes (see <code>setPinControl</code>) onViewingRestrictionsChanged Triggered after the viewingRestrictions changes (see <code>setViewingRestrictions</code>) onViewingRestrictionsWindowChanged Triggered after the viewingRestrictionsWindow changes (see <code>setViewingRestrictionsWindow</code>) onLiveWatershedChanged Triggered after the liveWatershed changes (see <code>setLiveWatershed</code>) onPlaybackWatershedChanged Triggered after the playbackWatershed changes (see <code>setPlaybackWatershed</code>) onBlockNotRatedContentChanged Triggered after the blockNotRatedContent changes (see <code>setBlockNotRatedContent</code>) onPinOnPurchaseChanged Triggered after the pinOnPurchase changes (see <code>setPinOnPurchase</code>) onHighContrastChanged Triggered after the high contrast settings changes(see <code>SetHighContrast</code>) onVoiceGuidanceChanged Triggered after the voice guidance enabled settings changes onVoiceGuidanceRateChanged Triggered after the voice guidance rate changed onVoiceGuidanceHintsChanged Triggered after the voice guidance hints changes onContentPinChanged Triggered after the ContentPin changes (see <code>setContentPin</code>) <p></p>"},{"location":"UserSettings/#onaudiodescriptionchanged","title":"onAudioDescriptionChanged","text":"<p>The <code>onAudioDescriptionChanged</code> event is triggered whenever there is a change in the audio description setting. Audio description is a feature designed to enhance the viewing experience for visually impaired users by providing additional narration that describes visual elements of the content, such as actions, settings, and scene changes. This event notifies the user about the activation or deactivation of the audio description feature, ensuring that they are aware of the current state of this accessibility option.</p> <p>This event is particularly useful for users who rely on audio descriptions to enjoy content fully. It ensures that any changes to the audio description setting are communicated promptly, allowing users to adjust their preferences or settings as needed.</p>"},{"location":"UserSettings/#related-functions_40","title":"Related Functions","text":"<p>setAudioDescription : This function allows users to enable or disable the audio description feature. When this function is called, it triggers the <code>onAudioDescriptionChanged</code> event to notify users about the updated state of the audio description setting.</p>"},{"location":"UserSettings/#parameters_40","title":"Parameters","text":"Name Type Description params object params.enabled boolean Receive audio description changes enable or not"},{"location":"UserSettings/#example_40","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onAudioDescriptionChanged\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onpreferredaudiolanguageschanged","title":"onPreferredAudioLanguagesChanged","text":"<p>The <code>onPreferredAudioLanguagesChanged</code> event is triggered whenever the user's preferred audio language settings are updated. This event notifies the system or application about the change, ensuring that the audio playback aligns with the user's updated preferences. For example, if a user changes their preferred audio language to \"French,\" this event will be triggered, allowing the application to adjust the audio track accordingly. This feature is particularly useful for multilingual users who want to customize their viewing experience by selecting their preferred language for audio playback.</p> <p>This event enhances user experience by ensuring that the audio language is always in sync with the user's preferences, providing a seamless and personalized entertainment experience.</p>"},{"location":"UserSettings/#related-functions_41","title":"Related Functions","text":"<p>setPreferredAudioLanguages : This function allows users to set their preferred audio languages. When this function is called, it updates the user's audio language preferences and triggers the <code>onPreferredAudioLanguagesChanged</code> event to notify the system of the change.</p>"},{"location":"UserSettings/#parameters_41","title":"Parameters","text":"Name Type Description params object params.preferredLanguages string Receive preferred Audio languages changes"},{"location":"UserSettings/#example_41","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPreferredAudioLanguagesChanged\",\n    \"params\": {\n        \"preferredLanguages\": \"eng\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onpresentationlanguagechanged","title":"onPresentationLanguageChanged","text":"<p>The <code>onPresentationLanguageChanged</code> event is triggered whenever the presentation language setting is updated. This event notifies the user about changes to the language used for on-screen menus, guides, and other interface elements. It ensures that the user interface reflects the newly selected language, enhancing accessibility and personalization for users who prefer different languages. This event is particularly useful for users in multilingual households or those who frequently switch between languages for better comprehension.</p>"},{"location":"UserSettings/#related-functions_42","title":"Related Functions","text":"<p>setPresentationLanguage : This API is used to set the presentation language for the user interface. When the language is updated using this function, it triggers the <code>onPresentationLanguageChanged</code> event to notify the system and the user about the change.</p>"},{"location":"UserSettings/#parameters_42","title":"Parameters","text":"Name Type Description params object params.presentationLanguage string Receive Presentation Language changes"},{"location":"UserSettings/#example_42","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPresentationLanguageChanged\",\n    \"params\": {\n        \"presentationLanguage\": \"en-US\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#oncaptionschanged","title":"onCaptionsChanged","text":"<p>The <code>onCaptionsChanged</code> event is triggered whenever there is a change in the captions settings of the user interface. Captions are textual representations of spoken dialogue, sound effects, and other audio elements in video content, designed to enhance accessibility for users who are deaf or hard of hearing or for those who prefer to watch content with subtitles. This event notifies the system or application when captions are enabled or disabled, allowing it to respond accordingly, such as updating the display settings or saving the user's preferences.  </p> <p>This event is particularly useful for users who rely on captions for accessibility or language support, ensuring that their viewing experience is tailored to their needs. For example, enabling captions can make content more inclusive by providing visual text for audio elements, while disabling captions can declutter the screen for users who do not require them.  </p>"},{"location":"UserSettings/#related-functions_43","title":"Related Functions","text":"<p>setCaptions : This API allows users to enable or disable captions manually. When the captions setting is changed using this function, it triggers the <code>onCaptionsChanged</code> event to notify the system of the update.</p>"},{"location":"UserSettings/#parameters_43","title":"Parameters","text":"Name Type Description params object params.enabled boolean"},{"location":"UserSettings/#example_43","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onCaptionsChanged\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onpreferredcaptionslanguageschanged","title":"onPreferredCaptionsLanguagesChanged","text":"<p>The <code>onPreferredCaptionsLanguagesChanged</code> event is triggered whenever there is a change in the user's preferred captions languages. This event notifies the system or application that the user has updated their language preferences for captions, ensuring that the content displayed aligns with their updated preferences. This feature is particularly useful for users who consume content in multiple languages or have specific accessibility needs. By listening to this event, applications can dynamically adjust the captions language to enhance the user experience without requiring manual intervention.</p> <p>For example, if a user updates their preferred captions language from English to Spanish, this event will notify the system, allowing it to automatically switch the captions language for supported content. This ensures a seamless and personalized viewing experience.</p>"},{"location":"UserSettings/#related-functions_44","title":"Related Functions","text":"<p>setPreferredCaptionsLanguages : This function allows users to set their preferred captions languages. When this function is called, it triggers the <code>onPreferredCaptionsLanguagesChanged</code> event to notify the system of the updated preferences.</p>"},{"location":"UserSettings/#parameters_44","title":"Parameters","text":"Name Type Description params object params.preferredLanguages string Receive PreferredCaption Languages changes"},{"location":"UserSettings/#example_44","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPreferredCaptionsLanguagesChanged\",\n    \"params\": {\n        \"preferredLanguages\": \"eng\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onpreferredclosedcaptionservicechanged","title":"onPreferredClosedCaptionServiceChanged","text":"<p>The <code>onPreferredClosedCaptionServiceChanged</code> event is triggered whenever the preferred closed caption service is updated. Closed captions are an essential accessibility feature that provides text-based transcriptions of spoken dialogue and other audio elements in video content. This event ensures that users are notified when their preferred closed caption service is changed, allowing them to stay informed about updates to their accessibility settings. This can be particularly useful for users who rely on specific closed caption services for better comprehension or accessibility.</p> <p>The event is designed to enhance the user experience by providing real-time updates about changes to the closed caption service preferences. For example, if a user switches from one closed caption service to another (e.g., from \"AUTO\" to a specific service), this event will notify relevant components or applications about the change, ensuring seamless integration and functionality across the system.</p>"},{"location":"UserSettings/#related-functions_45","title":"Related Functions","text":"<p>setPreferredClosedCaptionService : This API allows users to set their preferred closed caption service. When this function is called to update the preferred service, it triggers the <code>onPreferredClosedCaptionServiceChanged</code> event to notify the system and applications about the change.</p>"},{"location":"UserSettings/#parameters_45","title":"Parameters","text":"Name Type Description params object params.service string Receive Preferred Closed Caption Service changes"},{"location":"UserSettings/#example_45","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPreferredClosedCaptionServiceChanged\",\n    \"params\": {\n        \"service\": \"CC3\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onprivacymodechanged","title":"onPrivacyModeChanged","text":"<p>The <code>onPrivacyModeChanged</code> event is triggered whenever there is a change in the privacy mode setting of the device. Privacy mode determines how user data is shared or restricted. This event notifies the system or application about the updated privacy mode, which can either be \"SHARE\" (allowing data sharing) or \"DO_NOT_SHARE\" (restricting data sharing). This ensures that the system or application can adapt its behavior based on the user's privacy preferences. For example, certain features or functionalities that rely on data sharing may be disabled when privacy mode is set to \"DO_NOT_SHARE.\"</p> <p>This event is particularly useful for users who want to maintain control over their data sharing preferences. It ensures that any changes to privacy settings are immediately reflected across the system, providing a seamless and secure user experience.</p>"},{"location":"UserSettings/#related-functions_46","title":"Related Functions","text":"<p>setPrivacyMode : This function is used to update the privacy mode setting. It accepts a value of either \"SHARE\" or \"DO_NOT_SHARE\" to specify the desired privacy mode. When this function is called, it triggers the <code>onPrivacyModeChanged</code> event to notify the system of the change.</p>"},{"location":"UserSettings/#parameters_46","title":"Parameters","text":"Name Type Description params object params.privacyMode string Receive Privacy Mode changes"},{"location":"UserSettings/#example_46","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPrivacyModeChanged\",\n    \"params\": {\n        \"privacyMode\": \"DO_NOT_SHARE\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onpincontrolchanged","title":"onPinControlChanged","text":"<p>The <code>onPinControlChanged</code> event is triggered whenever there is a change in the PIN control setting. PIN control is a feature that allows users to enable or disable the requirement of a PIN for accessing certain content or features. This event notifies the system or application about the updated state of the PIN control, ensuring that any dependent functionalities or user interfaces can adapt accordingly. For example, if PIN control is enabled, the system may prompt users to enter a PIN before accessing restricted content. Conversely, if it is disabled, such restrictions may be lifted.</p> <p>This event is particularly useful for users who want to manage access to content based on their preferences, such as parental controls or privacy settings. It ensures that the system remains synchronized with the user's preferences in real-time.</p>"},{"location":"UserSettings/#related-functions_47","title":"Related Functions","text":"<p>setPinControl : This API is used to enable or disable the PIN control feature. When this function is called, it triggers the <code>onPinControlChanged</code> event to notify the system about the updated state of the PIN control setting.</p>"},{"location":"UserSettings/#parameters_47","title":"Parameters","text":"Name Type Description params object params.pinControl boolean Receive pin control changes enable or not"},{"location":"UserSettings/#example_47","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPinControlChanged\",\n    \"params\": {\n        \"pinControl\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onviewingrestrictionschanged","title":"onViewingRestrictionsChanged","text":"<p>The <code>onViewingRestrictionsChanged</code> event is triggered whenever there is a change in the viewing restrictions settings. Viewing restrictions are typically used to control access to certain types of content based on user preferences or regulatory requirements, such as parental controls, content ratings, or time-based restrictions. This event notifies the system or application that the viewing restrictions have been updated, ensuring that the changes are reflected in real-time. For example, if a parent updates the content rating restrictions to block certain types of content, this event will be triggered to apply the new settings across the platform.  </p> <p>This event is particularly useful for maintaining a consistent user experience by dynamically adapting the content availability based on the updated restrictions. It ensures that the system remains compliant with user-defined preferences and any applicable content guidelines.  </p>"},{"location":"UserSettings/#related-functions_48","title":"Related Functions","text":"<p>setViewingRestrictions : This function is used to update the viewing restrictions settings. When this function is called, it triggers the <code>onViewingRestrictionsChanged</code> event to notify the system of the changes.  </p> <p>getViewingRestrictions : This function retrieves the current viewing restrictions settings. It can be used to verify the updated restrictions after the <code>onViewingRestrictionsChanged</code> event is triggered.  </p> <p>setViewingRestrictionsWindow : This function sets a specific time window during which the viewing restrictions are applied. Changes made using this function may also trigger the <code>onViewingRestrictionsChanged</code> event if they affect the overall restrictions.  </p> <p>getViewingRestrictionsWindow : This function retrieves the current time window for viewing restrictions. It can be used to check the active restrictions window after the <code>onViewingRestrictionsChanged</code> event is triggered.  </p> <p>setPinControl : This function enables or disables the PIN control feature, which is often used in conjunction with viewing restrictions to secure access to restricted content. Changes to PIN control settings may indirectly influence the behavior of viewing restrictions.  </p> <p>getPinControl : This function retrieves the current status of the PIN control feature. It can be used to verify the PIN control settings after changes to viewing restrictions.</p>"},{"location":"UserSettings/#parameters_48","title":"Parameters","text":"Name Type Description params object params.viewingRestrictions string Receive viewingRestrictions changes"},{"location":"UserSettings/#example_48","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onViewingRestrictionsChanged\",\n    \"params\": {\n        \"viewingRestrictions\": \"{\\\"restrictions\\\": [{\\\"scheme\\\": \\\"US_TV\\\", \\\"restrict\\\": [\\\"TV-Y7/FV\\\"]}, {\\\"scheme\\\": \\\"MPAA\\\", \\\"restrict\\\": []}]}\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onviewingrestrictionswindowchanged","title":"onViewingRestrictionsWindowChanged","text":"<p>The <code>onViewingRestrictionsWindowChanged</code> event is triggered whenever there is a change in the viewing restrictions window settings. This event is particularly useful for users who want to manage or monitor the time-based restrictions applied to content viewing. For example, parents or guardians can use this feature to ensure that certain content is only accessible during specific hours, aligning with their preferences or household rules. The event notifies the system or application about the updated viewing restrictions window, enabling real-time adjustments or updates to the user interface or content accessibility.</p> <p>This event enhances user experience by providing dynamic feedback and ensuring that the viewing restrictions window settings are consistently applied across the platform. It is especially beneficial for maintaining control over content accessibility based on time-based rules, ensuring compliance with user-defined preferences.</p>"},{"location":"UserSettings/#related-functions_49","title":"Related Functions","text":"<p>setViewingRestrictionsWindow : This API allows users to define or update the viewing restrictions window. By setting specific time frames during which content can be accessed, this function directly triggers the <code>onViewingRestrictionsWindowChanged</code> event to notify the system of the updated settings.</p>"},{"location":"UserSettings/#parameters_49","title":"Parameters","text":"Name Type Description params object params.viewingRestrictionsWindow string Receive viewingRestrictionsWindow changes"},{"location":"UserSettings/#example_49","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onViewingRestrictionsWindowChanged\",\n    \"params\": {\n        \"viewingRestrictionsWindow\": \"ALWAYS\"\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onlivewatershedchanged","title":"onLiveWatershedChanged","text":"<p>The <code>onLiveWatershedChanged</code> event is triggered whenever there is a change in the \"Live Watershed\" setting. This setting is typically used to enforce content viewing restrictions based on the time of day or other criteria, ensuring that certain content is only accessible during specific periods. For example, it may be used to restrict access to mature content during hours when children are likely to be watching. When the \"Live Watershed\" setting is updated, this event notifies the system or application of the change, allowing it to adjust content availability or other related behaviors accordingly.  </p> <p>This event is particularly useful for users who want to maintain control over the type of content accessible in their household or environment, ensuring compliance with viewing restrictions or parental controls.  </p>"},{"location":"UserSettings/#related-functions_50","title":"Related Functions","text":"<p>setLiveWatershed : This function is used to update the \"Live Watershed\" setting. When this function is called, it triggers the <code>onLiveWatershedChanged</code> event to notify the system of the change.</p>"},{"location":"UserSettings/#parameters_50","title":"Parameters","text":"Name Type Description params object params.liveWatershed boolean Receives liveWatershed changes enable or not"},{"location":"UserSettings/#example_50","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onLiveWatershedChanged\",\n    \"params\": {\n        \"liveWatershed\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onplaybackwatershedchanged","title":"onPlaybackWatershedChanged","text":"<p>The <code>onPlaybackWatershedChanged</code> event is triggered whenever there is a change in the playback watershed setting. The playback watershed setting is a user-defined restriction that determines the type of content that can be played based on its age rating or content classification. This event notifies the system or application that the playback watershed setting has been updated, ensuring that the appropriate content restrictions are applied in real-time. For example, if the playback watershed is enabled, content deemed inappropriate for certain age groups will be restricted from playback. This event is particularly useful for parents or guardians who want to enforce content restrictions for children or for users who wish to customize their viewing experience based on personal preferences.</p>"},{"location":"UserSettings/#related-functions_51","title":"Related Functions","text":"<p>setPlaybackWatershed : This function is used to enable or disable the playback watershed setting. When this function is called, it triggers the <code>onPlaybackWatershedChanged</code> event to notify the system of the updated setting.  </p> <p>getPlaybackWatershed : This function retrieves the current status of the playback watershed setting, indicating whether it is enabled or disabled.</p>"},{"location":"UserSettings/#parameters_51","title":"Parameters","text":"Name Type Description params object params.playbackWatershed boolean Receive playbackWatershed changes enable or not"},{"location":"UserSettings/#example_51","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPlaybackWatershedChanged\",\n    \"params\": {\n        \"playbackWatershed\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onblocknotratedcontentchanged","title":"onBlockNotRatedContentChanged","text":"<p>The <code>onBlockNotRatedContentChanged</code> event is triggered whenever there is a change in the setting that determines whether content without a rating should be blocked. This event is particularly useful for users who want to enforce viewing restrictions based on content ratings, ensuring that unrated content is either allowed or restricted based on their preferences. For example, parents or guardians can use this feature to prevent access to unrated content that may not be suitable for children. When this setting is updated, the event notifies the system and any subscribed components, allowing them to respond accordingly, such as updating the user interface or enforcing the restriction in real-time.</p>"},{"location":"UserSettings/#related-functions_52","title":"Related Functions","text":"<p>setBlockNotRatedContent : This API is used to enable or disable the blocking of unrated content. When this setting is changed, it triggers the <code>onBlockNotRatedContentChanged</code> event to notify the system and relevant components about the update.</p>"},{"location":"UserSettings/#parameters_52","title":"Parameters","text":"Name Type Description params object params.blockNotRatedContent boolean Receive blockNotRatedContent changes enable or not"},{"location":"UserSettings/#example_52","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onBlockNotRatedContentChanged\",\n    \"params\": {\n        \"blockNotRatedContent\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onpinonpurchasechanged","title":"onPinOnPurchaseChanged","text":"<p>The <code>onPinOnPurchaseChanged</code> event is triggered whenever there is a change in the \"Pin on Purchase\" setting. This setting is used to enforce an additional layer of security by requiring a PIN to authorize purchases. It is particularly useful for households with multiple users or children, ensuring that unauthorized purchases are prevented. When this event is triggered, it notifies the system and any subscribed components about the updated status of the \"Pin on Purchase\" feature, allowing them to respond accordingly, such as updating the user interface or enforcing the new setting.</p> <p>This event is beneficial for users who want to maintain control over purchases made on their devices, providing peace of mind and preventing accidental or unauthorized transactions. It ensures that the PIN requirement is consistently applied whenever the setting is modified.</p>"},{"location":"UserSettings/#related-functions_53","title":"Related Functions","text":"<p>setPinOnPurchase : This API is used to enable or disable the \"Pin on Purchase\" feature. When this function is called, it triggers the <code>onPinOnPurchaseChanged</code> event to notify the system and other components about the change in the setting.</p>"},{"location":"UserSettings/#parameters_53","title":"Parameters","text":"Name Type Description params object params.pinOnPurchase boolean Receive pinOnPurchase changes enable or not"},{"location":"UserSettings/#example_53","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onPinOnPurchaseChanged\",\n    \"params\": {\n        \"pinOnPurchase\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onhighcontrastchanged","title":"onHighContrastChanged","text":"<p>The <code>onHighContrastChanged</code> event is triggered whenever the high contrast mode setting is updated. High contrast mode is an accessibility feature designed to improve the visibility of text and interface elements for users with visual impairments. When this event occurs, it indicates that the high contrast mode has been either enabled or disabled. This feature is particularly useful for users who require enhanced visual clarity to navigate and interact with the user interface effectively.  </p> <p>This event ensures that any changes to the high contrast setting are communicated to the relevant components or applications, allowing them to adjust their visual presentation accordingly. For example, when high contrast mode is enabled, the interface may switch to a color scheme with higher contrast between text and background, making it easier to read and interact with.  </p>"},{"location":"UserSettings/#related-functions_54","title":"Related Functions","text":"<p>setHighContrast : This API is used to enable or disable the high contrast mode. When the high contrast setting is updated using this function, it triggers the <code>onHighContrastChanged</code> event to notify other components or applications about the change.</p>"},{"location":"UserSettings/#parameters_54","title":"Parameters","text":"Name Type Description params object params.enabled boolean Receive high contrast enabled or not"},{"location":"UserSettings/#example_54","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onHighContrastChanged\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onvoiceguidancechanged","title":"onVoiceGuidanceChanged","text":"<p>The <code>onVoiceGuidanceChanged</code> event is triggered whenever the voice guidance feature is enabled or disabled. Voice guidance is an accessibility feature designed to assist users, particularly those with visual impairments, by providing spoken feedback about on-screen content, navigation, and settings. This event notifies the system or application when the state of voice guidance changes, allowing it to adapt accordingly. For example, enabling voice guidance might prompt the system to provide audio cues for menu navigation, while disabling it would stop such cues. This event ensures that the user experience remains seamless and accessible, reflecting the user's preferences in real-time.</p>"},{"location":"UserSettings/#related-functions_55","title":"Related Functions","text":"<p>setVoiceGuidance : This API is used to enable or disable the voice guidance feature. When this function is called, it triggers the <code>onVoiceGuidanceChanged</code> event to notify the system of the updated state.</p>"},{"location":"UserSettings/#parameters_55","title":"Parameters","text":"Name Type Description params object params.enabled boolean Receive voice guidance enabled or not"},{"location":"UserSettings/#example_55","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onVoiceGuidanceChanged\",\n    \"params\": {\n        \"enabled\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onvoiceguidanceratechanged","title":"onVoiceGuidanceRateChanged","text":"<p>The <code>onVoiceGuidanceRateChanged</code> event is triggered whenever the rate of voice guidance is updated. Voice guidance is a feature designed to assist users, particularly those with visual impairments, by providing spoken feedback for navigating menus, settings, and other interface elements. The rate of voice guidance determines the speed at which the spoken feedback is delivered, allowing users to customize it to their preference for better accessibility and usability. This event ensures that any changes made to the voice guidance rate are communicated effectively, enabling the system or application to respond accordingly, such as updating the user interface or saving the new rate setting.</p>"},{"location":"UserSettings/#related-functions_56","title":"Related Functions","text":"<p>setVoiceGuidanceRate : This function allows users to set the desired rate for voice guidance. It triggers the <code>onVoiceGuidanceRateChanged</code> event when the rate is successfully updated, ensuring the system reflects the new setting.</p>"},{"location":"UserSettings/#parameters_56","title":"Parameters","text":"Name Type Description params object params.rate number voice guidance rate value"},{"location":"UserSettings/#example_56","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onVoiceGuidanceRateChanged\",\n    \"params\": {\n        \"rate\": 0.1\n    }\n}\n</code></pre>"},{"location":"UserSettings/#onvoiceguidancehintschanged","title":"onVoiceGuidanceHintsChanged","text":"<p>The <code>onVoiceGuidanceHintsChanged</code> event is triggered whenever there is a change in the state of voice guidance hints. Voice guidance hints are additional auditory cues provided to assist users in navigating and interacting with the system, particularly beneficial for users with visual impairments. These hints can include spoken instructions or contextual information that enhance the accessibility of the user interface. For example, enabling voice guidance hints might provide more detailed descriptions of menu options or actions, making the system easier to use for individuals who rely on auditory feedback. This event ensures that the system or application can respond dynamically to changes in the voice guidance hints setting, allowing for real-time updates to the user experience.</p>"},{"location":"UserSettings/#related-functions_57","title":"Related Functions","text":"<p>setVoiceGuidanceHints : This API is used to enable or disable voice guidance hints. By calling this function, users can customize their accessibility preferences, and any changes made will trigger the <code>onVoiceGuidanceHintsChanged</code> event to notify the system of the updated state.</p>"},{"location":"UserSettings/#parameters_57","title":"Parameters","text":"Name Type Description params object params.hints boolean Receive voice guidance hints enabled or not"},{"location":"UserSettings/#example_57","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onVoiceGuidanceHintsChanged\",\n    \"params\": {\n        \"hints\": true\n    }\n}\n</code></pre>"},{"location":"UserSettings/#oncontentpinchanged","title":"onContentPinChanged","text":"<p>The <code>onContentPinChanged</code> event is triggered whenever there is a change in the content PIN settings. This event notifies the user about updates to the PIN used for controlling access to specific content, ensuring that the user is aware of any modifications to the security settings. The content PIN is typically used to restrict access to certain types of content based on parental controls or viewing restrictions. This event is particularly useful for users who want to monitor or confirm changes to their PIN settings, ensuring that their preferences for content access remain secure and consistent.</p>"},{"location":"UserSettings/#related-functions_58","title":"Related Functions","text":"<p>setContentPin : This API allows the user to set or update the content PIN. It validates the PIN format (typically a 4-digit numeric code) and ensures that the new PIN is applied correctly. Changes made using this function trigger the <code>onContentPinChanged</code> event.</p>"},{"location":"UserSettings/#parameters_58","title":"Parameters","text":"Name Type Description params object params.contentPin string contentPin"},{"location":"UserSettings/#example_58","title":"Example","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"client.events.onContentPinChanged\",\n    \"params\": {\n        \"contentPin\": \"1234\"\n    }\n}\n</code></pre>"}]}